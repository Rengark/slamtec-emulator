{
  "openapi": "3.0.0",
  "info": {
    "description": "本文档适用于思岚科技旗下的各类底盘和服务机器人产品.",
    "version": "1.1.0",
    "title": "Slamware RESTful API"
  },
  "tags": [
    {
      "name": "system",
      "description": "系统资源"
    },
    {
      "name": "slam",
      "description": "定位、建图相关功能"
    },
    {
      "name": "artifact",
      "description": "地图语义元素"
    },
    {
      "name": "motion",
      "description": "机器人运动控制"
    },
    {
      "name": "firmware",
      "description": "固件升级"
    },
    {
      "name": "statistics",
      "description": "运行数据统计"
    },
    {
      "name": "sensors",
      "description": "传感器控制"
    },
    {
      "name": "application",
      "description": "安卓应用程序管理(仅限ARM平台)"
    },
    {
      "name": "platform",
      "description": "机器人通用底盘和平台相关的功能"
    },
    {
      "name": "multi-floor",
      "description": "多楼层地图管理，乘电梯等功能"
    },
    {
      "name": "industry",
      "description": "工业搬运服务"
    },
    {
      "name": "delivery",
      "description": "配送服务(仅限整机，通用底盘无法支持)"
    }
  ],
  "paths": {
    "/api/core/system/v1/capabilities": {
      "get": {
        "tags": [
          "system"
        ],
        "summary": "获取机器人能力",
        "operationId": "getCapabilities",
        "description": "该接口用于判断机器人支持哪些功能，以及是否已完成初始化。本文档中的部分接口需要依赖特定的capability才能运行。",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Capability"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/core/system/v1/power/status": {
      "get": {
        "tags": [
          "system"
        ],
        "summary": "获取机器人电源状态",
        "operationId": "getPowerStatus",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PowerStatus"
                }
              }
            }
          }
        }
      }
    },
    "/api/core/system/v1/power/:shutdown": {
      "post": {
        "tags": [
          "system"
        ],
        "summary": "关闭或重启机器人",
        "operationId": "shutdown",
        "requestBody": {
          "description": "通过设置关机时间和重启时间来实现机器人延时重启，单位分钟，如果都为0则表示立即关机且不再重启。",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "shutdown_time_interval": {
                    "type": "integer",
                    "description": "关机时间"
                  },
                  "restart_time_interval": {
                    "type": "integer",
                    "description": "重启时间"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/BooleanResponse"
          }
        }
      }
    },
    "/api/core/system/v1/power/:hibernate": {
      "post": {
        "tags": [
          "system"
        ],
        "summary": "休眠机器人",
        "description": "休眠时激光雷达暂停工作",
        "operationId": "hibernate",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/core/system/v1/power/:wakeup": {
      "post": {
        "tags": [
          "system"
        ],
        "summary": "唤醒机器人",
        "operationId": "wakeup",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/core/system/v1/power/:restartmodule": {
      "post": {
        "tags": [
          "system"
        ],
        "summary": "重启模块",
        "operationId": "restartModule",
        "requestBody": {
          "description": "根据指定的重启模式（默认软复位）执行重启操作。",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "mode": {
                    "type": "string",
                    "description": "* `RestartModeSoft` 软件重启，只重启slamwared\n* `RestartModeHard` 重启系统\n* `RestartModeBase` 重启底盘\n",
                    "enum": [
                      "RestartModeSoft",
                      "RestartModeHard",
                      "RestartModeBase"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/BooleanResponse"
          }
        }
      }
    },
    "/api/core/system/v1/robot/info": {
      "get": {
        "tags": [
          "system"
        ],
        "summary": "获取设备信息",
        "operationId": "getRobotInfo",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceInfo"
                }
              }
            }
          }
        }
      }
    },
    "/api/core/system/v1/robot/health": {
      "get": {
        "tags": [
          "system"
        ],
        "summary": "获取设备健康状态信息",
        "operationId": "getRobotHealth",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseHealthInfo"
                }
              }
            }
          }
        }
      }
    },
    "/api/core/system/v1/robot/health/{error_code}": {
      "delete": {
        "tags": [
          "system"
        ],
        "summary": "清除出错的状态信息",
        "operationId": "clearRobotHealth",
        "parameters": [
          {
            "in": "path",
            "name": "error_code",
            "description": "错误码",
            "required": true,
            "example": 33621760,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Invalid Error Code"
          }
        }
      }
    },
    "/api/core/system/v1/laserscan": {
      "get": {
        "tags": [
          "system"
        ],
        "summary": "获取当前激光观测帧",
        "description": "<h4>所需最低固件版本 4.2.2</h4>",
        "operationId": "getLaserScan",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LaserScan"
                }
              }
            }
          }
        }
      }
    },
    "/api/core/system/v1/parameter": {
      "get": {
        "tags": [
          "system"
        ],
        "summary": "获取系统参数",
        "operationId": "getSystemParameter",
        "parameters": [
          {
            "in": "query",
            "name": "param",
            "description": "系统参数名:\n * `base.max_moving_speed` - 最大线速度\n * `base.max_angular_speed` - 最大角速度\n * `docking.docked_register_strategy` - 充电桩注册策略，`always` 每次回桩都注册，`when_not_exists` 桩不存在时注册\n",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "base.max_moving_speed",
                "base.max_angular_speed",
                "docking.docked_register_strategy"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/StringResponse"
          },
          "400": {
            "description": "Parameter is required"
          }
        }
      },
      "put": {
        "tags": [
          "system"
        ],
        "summary": "设置系统参数",
        "operationId": "setSystemParameter",
        "requestBody": {
          "description": "设置的系统参数仅本次运行有效，重启机器后恢复原值",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "param": {
                    "type": "string",
                    "example": "base.max_moving_speed",
                    "description": "系统参数名:\n * `base.max_moving_speed` - 最大线速度  m/s\n * `base.max_angular_speed` - 最大角速度 rad/s\n * `base.emergency_stop` - value 为on 表示触发急停，off表示消除急停\n * `base.brake_release` - value 为on 表示刹车释放，off表示恢复刹车\n",
                    "enum": [
                      "base.max_moving_speed",
                      "base.max_angular_speed",
                      "base.emergency_stop",
                      "base.brake_release"
                    ]
                  },
                  "value": {
                    "type": "string",
                    "example": 0.5
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/BooleanResponse"
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/api/core/system/v1/network/status": {
      "get": {
        "tags": [
          "system"
        ],
        "summary": "获取网络状态",
        "operationId": "getNetworkStatus",
        "description": "获取机器人当前的网络状态",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "networkstatus": {
                      "$ref": "#/components/schemas/NetworkStatus"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "system"
        ],
        "summary": "设置网络状态",
        "operationId": "setNetworkStatus",
        "description": "当网络由安卓管理时，该接口会返回false",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options内容根据NetworkMode而定, 如设为Station模式时，需要传入ssid和password",
                "properties": {
                  "networkmode": {
                    "type": "integer",
                    "example": 0,
                    "description": "网络模式:\n  * `0` - 设为AP模式 \n  * `1` - 设为Station模式\n  * `2` - 禁用WIFI\n  * `3` - 禁用DHCP\n  * `4` - 启用DHCP\n",
                    "enum": [
                      0,
                      1,
                      2,
                      3,
                      4
                    ]
                  },
                  "options": {
                    "type": "object",
                    "oneOf": [
                      {},
                      {
                        "$ref": "#/components/schemas/ApModeOptions"
                      },
                      {
                        "$ref": "#/components/schemas/StationModeOptions"
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/BooleanResponse"
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/api/core/system/v1/network/route": {
      "get": {
        "tags": [
          "system"
        ],
        "summary": "获取路由信息",
        "operationId": "getNetworkRoute",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RouteStatus"
                }
              }
            }
          },
          "500": {
            "description": "Failed to get route"
          }
        }
      },
      "put": {
        "tags": [
          "system"
        ],
        "summary": "设置路由信息",
        "operationId": "setNetworkRoute",
        "description": "可设置路由优先级，当wifi和4g都可用时，可选择wifi优先或者4g优先。",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RouteStatus"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Invalid JSON data"
          },
          "500": {
            "description": "Failed to set route"
          }
        }
      }
    },
    "/api/core/system/v1/network/apn": {
      "get": {
        "tags": [
          "system"
        ],
        "summary": "获取cmlink apn",
        "operationId": "getCmlinkApn",
        "description": "<h4>所需最低固件版本 4.4.0</h4>",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApnStatus"
                }
              }
            }
          },
          "500": {
            "description": "Failed to get cmlink apn"
          }
        }
      },
      "put": {
        "tags": [
          "system"
        ],
        "summary": "设置cmlink apn",
        "operationId": "setCmlinkApn",
        "description": "根据地区来设置cmlink apn，设置4g在不同地区的接入点，具体的apn请查阅运营商官网<h4>所需最低固件版本 4.4.0</h4>",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApnStatus"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "500": {
            "description": "Failed to set cmlink apn"
          }
        }
      }
    },
    "/api/core/system/v1/cube/config": {
      "put": {
        "tags": [
          "system"
        ],
        "summary": "设置Cube配置",
        "operationId": "setCubeConfig",
        "description": "以二进制方式读取cube_cfg_dat文件作为Request Body. </br>Cube配置文件请用RoboStudio的Cube配置工具导出或联系思岚技术支持获取. <h4>所需最低固件版本  4.2.0</h4>",
        "requestBody": {
          "content": {
            "application/octet-stream": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/core/system/v1/light/control": {
      "post": {
        "tags": [
          "system"
        ],
        "summary": "设置灯光控制效果",
        "operationId": "setLightControl",
        "description": "可以设置不同通道，不同部分，不同类型的led灯颜色效果。",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LightControlData"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Invalid JSON data"
          },
          "500": {
            "description": "Failed to set light control"
          }
        }
      }
    },
    "/api/core/system/v1/aeb/control": {
      "post": {
        "tags": [
          "system"
        ],
        "summary": "设置AEB控制",
        "operationId": "setAEBControl",
        "description": "设置AEB功能打开或者关闭。",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "string",
                "enum": [
                  "On",
                  "Off"
                ],
                "example": "On"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Invalid JSON data"
          },
          "500": {
            "description": "Failed to set aeb control"
          }
        }
      }
    },
    "/api/core/system/v1/jack/status": {
      "post": {
        "tags": [
          "system"
        ],
        "summary": "设置千斤顶状态",
        "operationId": "setJackReq",
        "description": "设置千斤顶状态。",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "string",
                "enum": [
                  "Up",
                  "Down",
                  "Stop",
                  "ClearAlarm"
                ],
                "example": "On"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Invalid JSON data"
          },
          "500": {
            "description": "Failed to set aeb control"
          }
        }
      },
      "get": {
        "tags": [
          "system"
        ],
        "summary": "获取千斤顶状态",
        "operationId": "getJackStatus",
        "description": "获取千斤顶状态。",
        "responses": {
          "200": {
            "$ref": "#/components/responses/JackStatusResponse"
          }
        }
      }
    },
    "/api/core/system/v1/rawadcimu": {
      "get": {
        "tags": [
          "system"
        ],
        "summary": "获取IMU的ADC原始值",
        "operationId": "getImuRawADCData",
        "description": "获取机器人IMU的ADC原始值",
        "responses": {
          "200": {
            "$ref": "#/components/responses/IMURawADCDataResponse"
          }
        }
      }
    },
    "/api/core/system/v1/battery/pack": {
      "get": {
        "tags": [
          "system"
        ],
        "summary": "获取电池包的电流和温度",
        "operationId": "getBatteryPack",
        "description": "获取电池包的电流和温度",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "current": {
                      "type": "number",
                      "example": 1000,
                      "description": "电池包电流，单位mA，正值表示充电，负值表示放电"
                    },
                    "temp_count": {
                      "type": "integer",
                      "example": 2,
                      "description": "电池包温度传感器数量"
                    },
                    "temp": {
                      "type": "array",
                      "description": "电池包温度传感器温度值，单位0.1摄氏度",
                      "example": [233,234],
                      "items": {
                        "type": "integer"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/core/system/v1/rawimu": {
      "get": {
        "tags": [
          "system"
        ],
        "summary": "获取IMU原始值",
        "operationId": "getImuRawData",
        "description": "获取机器人IMU原始值",
        "responses": {
          "200": {
            "$ref": "#/components/responses/IMURawDataResponse"
          }
        }
      }
    },
    "/api/core/artifact/v1/lines/{usage}": {
      "parameters": [
        {
          "in": "path",
          "name": "usage",
          "required": true,
          "description": "* `tracks` 虚拟轨道\n* `walls` 虚拟墙\n",
          "schema": {
            "type": "string",
            "enum": [
              "tracks",
              "walls"
            ]
          }
        }
      ],
      "get": {
        "tags": [
          "artifact"
        ],
        "summary": "获取虚拟线段",
        "operationId": "getLines",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Line"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "artifact"
        ],
        "summary": "添加虚拟线段",
        "description": "添加时id为无效字段，可为任意值。",
        "operationId": "addLines",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Line"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/BooleanResponse"
          }
        }
      },
      "put": {
        "tags": [
          "artifact"
        ],
        "summary": "修改虚拟线段",
        "operationId": "modifyLines",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Line"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/BooleanResponse"
          }
        }
      },
      "delete": {
        "tags": [
          "artifact"
        ],
        "summary": "清空某一类虚拟线段",
        "operationId": "clearLines",
        "responses": {
          "200": {
            "$ref": "#/components/responses/BooleanResponse"
          }
        }
      }
    },
    "/api/core/artifact/v1/lines/{usage}/{id}": {
      "parameters": [
        {
          "in": "path",
          "name": "usage",
          "required": true,
          "description": "* `tracks` 虚拟轨道\n* `walls` 虚拟墙\n",
          "schema": {
            "type": "string",
            "enum": [
              "tracks",
              "walls"
            ]
          }
        },
        {
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ],
      "delete": {
        "tags": [
          "artifact"
        ],
        "summary": "删除虚拟线段",
        "operationId": "removeLineById",
        "responses": {
          "200": {
            "$ref": "#/components/responses/BooleanResponse"
          }
        }
      }
    },
    "/api/core/artifact/v1/rectangle-areas/{usage}": {
      "parameters": [
        {
          "in": "path",
          "name": "usage",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/RectangleAreaUsage"
          }
        }
      ],
      "get": {
        "tags": [
          "artifact"
        ],
        "summary": "获取矩形区域",
        "operationId": "getRectangleAreas",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RectangleArea"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "artifact"
        ],
        "summary": "添加矩形区域",
        "description": "不同类型的矩形区域，所需要的metadata也不同，请参考文档描述。",
        "operationId": "addRectangleArea",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "area": {
                    "type": "object",
                    "properties": {
                      "start": {
                        "$ref": "#/components/schemas/Point"
                      },
                      "end": {
                        "$ref": "#/components/schemas/Point"
                      },
                      "half_width": {
                        "type": "number"
                      }
                    }
                  },
                  "metadata": {
                    "$ref": "#/components/schemas/RectangleAreaMetadata"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/BooleanResponse"
          }
        }
      },
      "delete": {
        "tags": [
          "artifact"
        ],
        "summary": "清空某一类矩形区域",
        "operationId": "clearRectangleAreas",
        "responses": {
          "200": {
            "$ref": "#/components/responses/BooleanResponse"
          }
        }
      }
    },
    "/api/core/artifact/v1/rectangle-areas/{usage}/{id}": {
      "parameters": [
        {
          "in": "path",
          "name": "usage",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/RectangleAreaUsage"
          }
        },
        {
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ],
      "put": {
        "tags": [
          "artifact"
        ],
        "summary": "编辑矩形区域",
        "description": "修改指定ID的矩形区域坐标或metadata。",
        "operationId": "editRectangleArea",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "area": {
                    "type": "object",
                    "properties": {
                      "start": {
                        "$ref": "#/components/schemas/Point"
                      },
                      "end": {
                        "$ref": "#/components/schemas/Point"
                      },
                      "half_width": {
                        "type": "number"
                      }
                    }
                  },
                  "metadata": {
                    "$ref": "#/components/schemas/RectangleAreaMetadata"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/BooleanResponse"
          }
        }
      },
      "delete": {
        "tags": [
          "artifact"
        ],
        "summary": "删除矩形区域",
        "operationId": "removeRectangleAreaById",
        "responses": {
          "200": {
            "$ref": "#/components/responses/BooleanResponse"
          }
        }
      }
    },
    "/api/core/artifact/v1/pois": {
      "get": {
        "tags": [
          "artifact"
        ],
        "summary": "获取当前地图中的所有POI",
        "description": "POI指Point of interest, 也称为星标或兴趣点，用于标记地图上的某个位姿，以及若干与业务逻辑相关的metadata。",
        "operationId": "getCurrentPois",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PoseEntry"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "artifact"
        ],
        "summary": "添加POI",
        "operationId": "addPois",
        "description": "调用方应当随机生成一个UUID作为id, metadata中的display_name用于界面显示, type用于区分POI类型。<br/> 在建图过程中添加POI时，建议不包含Pose，此时会用机器人当前位置创建POI，并且记录传感器观测信息，在闭环后会进行位姿调整。",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PoseEntry"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "tags": [
          "artifact"
        ],
        "summary": "清空POI",
        "operationId": "clearPois",
        "responses": {
          "200": {
            "$ref": "#/components/responses/BooleanResponse"
          }
        }
      }
    },
    "/api/core/artifact/v1/pois/:adjust": {
      "post": {
        "tags": [
          "artifact"
        ],
        "summary": "优化POI位姿",
        "description": "如果在建图时添加POI，则在闭环后POI会跟着调整位姿，调用该接口可以进一步减少位姿调整的误差。<br/> 【注意】仅在闭环后调用有效，其他时候无需调用。<h4>所需最低固件版本  4.2.4</h4>",
        "operationId": "adjustPois",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/core/artifact/v1/pois/{poi_id}": {
      "parameters": [
        {
          "in": "path",
          "name": "poi_id",
          "required": true,
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "get": {
        "tags": [
          "artifact"
        ],
        "summary": "根据ID查找POI",
        "operationId": "getPoiById",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PoseEntry"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "artifact"
        ],
        "summary": "修改POI",
        "operationId": "modifyPoi",
        "description": "请求报文中pose和metadata可以只包含其中一个，则另一个字段保持不变。",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "pose": {
                    "$ref": "#/components/schemas/Pose3D"
                  },
                  "metadata": {
                    "type": "object"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/BooleanResponse"
          }
        }
      },
      "delete": {
        "tags": [
          "artifact"
        ],
        "summary": "删除POI",
        "operationId": "deletePoi",
        "responses": {
          "200": {
            "$ref": "#/components/responses/BooleanResponse"
          }
        }
      }
    },
    "/api/core/artifact/v1/laser-landmarks": {
      "get": {
        "tags": [
          "artifact"
        ],
        "summary": "获取激光地标",
        "operationId": "getLaserLandmarks",
        "description": "激光地标指激光雷达识别到的反光板位置。<h4>所需最低固件版本：5.1.1</h4>",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PoseEntry"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "artifact"
        ],
        "summary": "清空激光地标",
        "operationId": "deleteLaserLandmarks",
        "description": "清空所有激光地标<h4>所需最低固件版本：5.1.1</h4>",
        "responses": {
          "200": {
            "$ref": "#/components/responses/BooleanResponse"
          }
        }
      },
      "put": {
        "tags": [
          "artifact"
        ],
        "summary": "设置激光地标",
        "operationId": "putLaserLandmarks",
        "description": "将从地图中读出的激光地标信息设置到Slamware中<h4>所需最低固件版本：5.1.1</h4>",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PoseEntry"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/BooleanResponse"
          }
        }
      }
    },
    "/api/core/artifact/v1/laser-landmarks/:update": {
      "get": {
        "tags": [
          "artifact"
        ],
        "summary": "获取激光地标更新状态",
        "operationId": "getLaserLandmarkUpdate",
        "description": "Slamware是否正在自动更新激光地标<h4>所需最低固件版本：5.1.1</h4>",
        "responses": {
          "200": {
            "$ref": "#/components/responses/BooleanResponse"
          }
        }
      },
      "put": {
        "tags": [
          "artifact"
        ],
        "summary": "设置取激光地标更新状态",
        "operationId": "setLaserLandmarkUpdate",
        "description": "设置是否允许Slamware自动更新激光地标<h4>所需最低固件版本：5.1.1</h4>",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "enable": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/BooleanResponse"
          }
        }
      }
    },
    "/api/core/artifact/v1/laser-landmarks/:remove": {
      "post": {
        "tags": [
          "artifact"
        ],
        "summary": "删除激光地标",
        "operationId": "removeLaserLandmarks",
        "description": "删除部分激光地标, 请求报文为ID数组，ID来自获取激光地标接口返回内容的id字段。<h4>所需最低固件版本：5.1.1</h4>",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/BooleanResponse"
          }
        }
      }
    },
    "/api/core/motion/v1/action-factories": {
      "get": {
        "tags": [
          "motion"
        ],
        "summary": "获取所有支持的Action",
        "operationId": "getActionFactories",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "action_name": {
                        "type": "string",
                        "example": "slamtec.agent.actions.MoveToAction"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/core/motion/v1/actions/:current": {
      "get": {
        "tags": [
          "motion"
        ],
        "summary": "获取当前行为",
        "operationId": "getCurrentAction",
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionInfoResponse"
          },
          "404": {
            "description": "Action Not Found"
          }
        }
      },
      "delete": {
        "tags": [
          "motion"
        ],
        "summary": "终止当前行为",
        "operationId": "abortCurrentAction",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/core/motion/v1/actions": {
      "post": {
        "tags": [
          "motion"
        ],
        "summary": "创建新的运动行为",
        "operationId": "createAction",
        "requestBody": {
          "description": "action_name通过/core/motion/v1/action-factories接口进行查询, options具体内容根据action类型而定",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "action_name": {
                    "type": "string",
                    "example": "slamtec.agent.actions.MoveToAction",
                    "description": "* `slamtec.agent.actions.MoveToAction` 自主导航移动，对应参数为MoveToActionOptions\n* `slamtec.agent.actions.SeriesMoveToAction` 包含多个目标点的自主导航移动，对应参数为SeriesMoveToActionOptions\n* `slamtec.agent.actions.MoveByAction` 遥控移动, 需要定时调用以达到连续运动效果，对应参数为MoveByActionOptions\n* `slamtec.agent.actions.GoHomeAction` 自主回桩，对应参数为GoHomeActionOptions\n* `slamtec.agent.actions.RotateToAction` 原地旋转，转到指定角度，对应参数为RotateToActionOptions\n* `slamtec.agent.actions.RotateAction` 原地旋转，转动指定角度，对应参数为RotateActionOptions\n* `slamtec.agent.actions.MoveToTagAction` 通过标签进行精准对接，对应参数为MoveToTagActionOptions\n* `slamtec.agent.actions.BackOffFromTagAction` 从二维码前后退，对应参数为BackOffFromTagActionOptions\n* `slamtec.agent.actions.RecoverLocalizationAction` 重定位，对应参数为RecoverLocalizationActionOptions\n* `slamtec.agent.actions.ManualRelocalizationAction` 手动重定位，机器人在被推动的同时尝试找回定位，在重定位成功或机器人被推到桩上时action结束，对应参数为空\n* `slamtec.agent.actions.MultiFloorMoveAction` 跨楼层移动，对应参数为MultiFloorMoveActionOptions，依赖slamware.agent.multi_floor能力               \n* `slamtec.agent.actions.MultiFloorBackHomeAction` 跨楼层自主回桩，对应参数也是GoHomeActionOptions，依赖slamware.agent.multi_floor能力\n* `slamtec.agent.actions.ReturnToParkingAction` 自主返航回到待命点（POI类型为PARKING），支持多机避障和排队功能（需要Lora模块），对应参数是ReturnToParkingActionOptions,依赖slamware.agent.multi_floor能力，所需固件版本为4.5.5\n* `slamtec.agent.actions.FollowPathPointsAction` 跟随路径点的导航移动，对应参数为FollowPathPointsActionOptions，所需最低固件版本为5.1.1 \n* `slamtec.agent.actions.EnterElevatorAction` 机器人进电梯，对应参数为EnterElevatorActionOptions，所需最低固件版本为5.1.1 \n*`slamtec.agent.actions.LeaveElevatorAction`  机器人出电梯，对应参数为LeaveElevatorActionOptions，所需最低固件版本为5.1.1 \n"
                  },
                  "options": {
                    "type": "object",
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/MoveToActionOptions"
                      },
                      {
                        "$ref": "#/components/schemas/SeriesMoveToActionOptions"
                      },
                      {
                        "$ref": "#/components/schemas/MoveByActionOptions"
                      },
                      {
                        "$ref": "#/components/schemas/GoHomeActionOptions"
                      },
                      {
                        "$ref": "#/components/schemas/RotateToActionOptions"
                      },
                      {
                        "$ref": "#/components/schemas/RotateActionOptions"
                      },
                      {
                        "$ref": "#/components/schemas/MoveToTagActionOptions"
                      },
                      {
                        "$ref": "#/components/schemas/BackOffFromTagActionOptions"
                      },
                      {
                        "$ref": "#/components/schemas/RecoverLocalizationActionOptions"
                      },
                      {
                        "$ref": "#/components/schemas/MultiFloorMoveActionOptions"
                      },
                      {
                        "$ref": "#/components/schemas/SweepActionOptions"
                      },
                      {
                        "$ref": "#/components/schemas/ReturnToParkingActionOptions"
                      },
                      {
                        "$ref": "#/components/schemas/FollowPathPointsActionOptions"
                      },
                      {
                        "$ref": "#/components/schemas/EnterElevatorActionOptions"
                      },
                      {
                        "$ref": "#/components/schemas/LeaveElevatorActionOptions"
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionInfoResponse"
          },
          "400": {
            "description": "Can not create action"
          }
        }
      }
    },
    "/api/core/motion/v1/actions/{action_id}": {
      "get": {
        "tags": [
          "motion"
        ],
        "summary": "查询Action状态",
        "description": "可查询最近20次action的状态, state.status为4表示action已结束，此时通过result判断成功与否。",
        "operationId": "getActionResult",
        "parameters": [
          {
            "in": "path",
            "name": "action_id",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ActionInfo"
                    },
                    {
                      "$ref": "#/components/schemas/ActionGravestone"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/api/core/motion/v1/path": {
      "get": {
        "tags": [
          "motion"
        ],
        "summary": "获取剩余路径点",
        "description": "当前Action剩余的路径点",
        "operationId": "getRemainingPath",
        "responses": {
          "200": {
            "$ref": "#/components/responses/PathPointsResponse"
          }
        }
      }
    },
    "/api/core/motion/v1/milestones": {
      "get": {
        "tags": [
          "motion"
        ],
        "summary": "获取剩余目标点",
        "description": "当前Action剩余的目标点",
        "operationId": "getRemainingMilestones",
        "responses": {
          "200": {
            "$ref": "#/components/responses/PathPointsResponse"
          }
        }
      }
    },
    "/api/core/motion/v1/speed": {
      "get": {
        "tags": [
          "motion"
        ],
        "summary": "获取运动速度",
        "description": "获取机器人当前运动速度",
        "operationId": "getCurrentSpeed",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "vx": {
                      "type": "number",
                      "description": "前后方向线速度, 前进为正，后退为负"
                    },
                    "vy": {
                      "type": "number",
                      "description": "左右方向线速度，向左为正，向右为负（双轮差速模型的机器该值都为0）"
                    },
                    "omega": {
                      "type": "number",
                      "description": "机器人角速度，单位rad/s"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/core/motion/v1/time": {
      "get": {
        "tags": [
          "motion"
        ],
        "summary": "获取剩余时间",
        "description": "获取机器人到目的地的剩余运动时间（估计值）",
        "operationId": "getRemainingTime",
        "responses": {
          "200": {
            "$ref": "#/components/responses/DoubleResponse"
          }
        }
      }
    },
    "/api/core/motion/v1/:search_path": {
      "post": {
        "tags": [
          "motion"
        ],
        "summary": "搜索路径",
        "description": "搜索从机器人到目标点的最优路径",
        "operationId": "searchPath",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "target": {
                    "$ref": "#/components/schemas/Point"
                  },
                  "timeout": {
                    "type": "integer",
                    "description": "搜索路径的超时时间"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/PathPointsResponse"
          }
        }
      }
    },
    "/api/core/motion/v1/strategies": {
      "get": {
        "tags": [
          "motion"
        ],
        "summary": "获取支持的所有运动策略",
        "description": "运动策略为Slamware一系列内部参数的组合，涉及到运动速度、避障行为等各个方面，不同的策略可适用于不同的场景。一般情况下采用默认策略即可。<h4>所需最低固件版本 4.2.4</h4>",
        "operationId": "getMotionStrategies",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "description": "* `default` 默认运动模式\n* `depot` 工厂、仓库模式，运动速度大，避障灵活性较低，适用于对速度要求高的空旷场景\n* `inventory` 盘点模式，中等速度，遇障碍物可以平滑避障，被阻挡时可记录障碍物位置，适合商超盘点、巡检等场景\n* `delivery` 配送模式，机器人加减速较慢，运动更平稳，遇障碍物可以平滑避障，适合配送场景\n* `low_speed` 低速模式，机器人最大运动速度及加减速都比较低，比delivery更平稳，适合液体配送\n",
                    "enum": [
                      "default",
                      "depot",
                      "inventory",
                      "delivery",
                      "low_speed"
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/core/motion/v1/strategies/:current": {
      "get": {
        "tags": [
          "motion"
        ],
        "summary": "获取当前运动策略",
        "operationId": "getCurrentStrategy",
        "responses": {
          "200": {
            "$ref": "#/components/responses/StringResponse"
          }
        }
      },
      "put": {
        "tags": [
          "motion"
        ],
        "summary": "设置运动策略",
        "operationId": "setCurrentStrategy",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "strategy": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/BooleanResponse"
          }
        }
      }
    },
    "/api/core/slam/v1/localization/pose": {
      "get": {
        "tags": [
          "slam"
        ],
        "summary": "获取机器人位姿",
        "operationId": "getPose",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pose3D"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "slam"
        ],
        "summary": "设置机器人位姿",
        "description": "将机器人强制设置到地图中的某个位置",
        "operationId": "setPose",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Pose3D"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Invalid Argument"
          }
        }
      }
    },
    "/api/core/slam/v1/localization/odopose": {
      "get": {
        "tags": [
          "slam"
        ],
        "summary": "获取机器人里程计位姿",
        "operationId": "getOdoPose",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pose3D"
                }
              }
            }
          }
        }
      }
    },
    "/api/core/slam/v1/localization/quality": {
      "get": {
        "tags": [
          "slam"
        ],
        "summary": "获取定位质量",
        "operationId": "getLocalizationQuality",
        "description": "定位质量范围 0 ~ 100，值越大表示定位越好",
        "responses": {
          "200": {
            "$ref": "#/components/responses/IntegerResponse"
          }
        }
      }
    },
    "/api/core/slam/v1/localization/:enable": {
      "get": {
        "tags": [
          "slam"
        ],
        "summary": "是否支持定位",
        "operationId": "getMapLocalization",
        "description": "返回值true表示支持定位，false表示暂停定位即纯里程模式",
        "responses": {
          "200": {
            "$ref": "#/components/responses/BooleanResponse"
          }
        }
      },
      "put": {
        "tags": [
          "slam"
        ],
        "summary": "开启/暂停定位",
        "operationId": "setMapLocalization",
        "description": "返回值true表示操作成功",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "enable": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/BooleanResponse"
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/api/core/slam/v1/localization/status/:reset": {
      "post": {
        "tags": [
          "slam"
        ],
        "summary": "重置定位状态",
        "operationId": "resetLocalizationStatus",
        "description": "将定位状态重置",
        "responses": {
          "200": {
            "$ref": "#/components/responses/BooleanResponse"
          }
        }
      }
    },
    "/api/core/slam/v1/mapping/:enable": {
      "get": {
        "tags": [
          "slam"
        ],
        "summary": "是否开启建图",
        "operationId": "getMapUpdate",
        "description": "返回值true表示建图模式，false表示定位模式",
        "responses": {
          "200": {
            "$ref": "#/components/responses/BooleanResponse"
          }
        }
      },
      "put": {
        "tags": [
          "slam"
        ],
        "summary": "开启/暂停建图",
        "operationId": "setMapUpdate",
        "description": "返回值true表示操作成功",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "enable": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/BooleanResponse"
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/api/core/slam/v1/loopclosure/:enable": {
      "get": {
        "tags": [
          "slam"
        ],
        "summary": "是否开启闭环检测",
        "operationId": "getLoopClosure",
        "description": "<h4>所需最低固件版本 4.6.0</h4>",
        "responses": {
          "200": {
            "$ref": "#/components/responses/BooleanResponse"
          }
        }
      },
      "put": {
        "tags": [
          "slam"
        ],
        "summary": "开启/暂停闭环检测",
        "operationId": "setLoopClosure",
        "description": "返回值true表示操作成功<h4>所需最低固件版本 4.6.0</h4>",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "enable": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/BooleanResponse"
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/api/core/slam/v1/homepose": {
      "get": {
        "tags": [
          "slam"
        ],
        "summary": "获取充电桩位置",
        "operationId": "getHomePose",
        "description": "获取当前的充电桩位置，如果当前地图中不存在充电桩，则返回404错误",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pose3D"
                }
              }
            }
          },
          "404": {
            "description": "Home dock not found"
          }
        }
      },
      "put": {
        "tags": [
          "slam"
        ],
        "summary": "设置充电桩位置",
        "operationId": "setHomePose",
        "description": "设置当前的充电桩位置，当地图中存在多个充电桩时，需要上位机设置其中一个作为当前使用的桩。",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Pose3D"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/BooleanResponse"
          }
        }
      }
    },
    "/api/core/slam/v1/homedocks": {
      "get": {
        "tags": [
          "slam"
        ],
        "summary": "获取所有充电桩信息",
        "operationId": "getHomeDocks",
        "description": "获取机器人的所有充电桩信息。<h4>所需最低固件版本 4.3.2</h4>",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PoseEntry"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "slam"
        ],
        "summary": "设置所有充电桩",
        "operationId": "setHomeDocks",
        "description": "设置机器人的所有充电桩信息。<h4>所需最低固件版本 4.3.2</h4>",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PoseEntry"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/BooleanResponse"
          }
        }
      },
      "post": {
        "tags": [
          "slam"
        ],
        "summary": "添加充电桩",
        "operationId": "addHomeDock",
        "description": "给机器人添加一个充电桩，metadata需要display_name字段，表示充电桩名称。",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PoseEntry"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/BooleanResponse"
          }
        }
      },
      "delete": {
        "tags": [
          "slam"
        ],
        "summary": "清空充电桩信息",
        "operationId": "clearHomeDocks",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PoseEntry"
                }
              }
            }
          }
        }
      }
    },
    "/api/core/slam/v1/homedocks/:register": {
      "post": {
        "tags": [
          "slam"
        ],
        "summary": "注册充电桩",
        "operationId": "registerHomeDock",
        "description": "根据机器人当前位置在地图上注册一个充电桩",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "display_name是对用户显示的充电桩名称",
                "properties": {
                  "metadata": {
                    "type": "object",
                    "properties": {
                      "display_name": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PoseEntry"
                }
              }
            }
          }
        }
      }
    },
    "/api/core/slam/v1/homedocks/{dock_id}": {
      "parameters": [
        {
          "in": "path",
          "name": "dock_id",
          "required": true,
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "put": {
        "tags": [
          "slam"
        ],
        "summary": "编辑充电桩信息",
        "operationId": "editHomeDock",
        "description": "编辑充电桩信息，id不可修改，只允许修改pose和metadata",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "pose": {
                    "$ref": "#/components/schemas/Pose2D"
                  },
                  "metadata": {
                    "type": "object"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/BooleanResponse"
          }
        }
      },
      "delete": {
        "tags": [
          "slam"
        ],
        "summary": "移除一个充电桩",
        "operationId": "eraseHomeDock",
        "responses": {
          "200": {
            "$ref": "#/components/responses/BooleanResponse"
          }
        }
      }
    },
    "/api/core/slam/v1/imu": {
      "get": {
        "tags": [
          "slam"
        ],
        "summary": "获取IMU数据",
        "operationId": "getImu",
        "description": "获取以机器人坐标系表示的IMU数据",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImuData"
                }
              }
            }
          }
        }
      }
    },
    "/api/core/slam/v1/knownarea": {
      "get": {
        "tags": [
          "slam"
        ],
        "summary": "获取已知区域",
        "description": "已知区域即当前地图的范围, 机器人的活动空间和各种人工标记元素都应当在此范围内",
        "operationId": "getKnownArea",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Rectangle"
                }
              }
            }
          }
        }
      }
    },
    "/api/core/slam/v1/maps/explore": {
      "parameters": [
        {
          "in": "query",
          "name": "min_x",
          "required": false,
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "min_y",
          "required": false,
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "max_x",
          "required": false,
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "max_y",
          "required": false,
          "schema": {
            "type": "number"
          }
        }
      ],
      "get": {
        "tags": [
          "slam"
        ],
        "summary": "获取栅格地图",
        "description": "获取激光探索的栅格地图, 可通过min_x, min_y, max_x, max_y指定获取的范围, 默认获取全部地图. </br> 响应报文为二进制字节流，前32字节为元数据(低位字节在前)，后续为地图数据。 <table border=\"1\" cellspacing='6'><tr><td>位置</td><td>数据类型</td><td>描述</td></tr><tr><td>0-3</td><td>float</td><td>地图起始位置的X坐标</td></tr><tr><td>4-7</td><td>float</td><td>地图起始位置的Y坐标</td></tr><tr><td>8-11</td><td>uint32</td><td>X轴方向栅格数量</td></tr><tr><td>12-15</td><td>uint32</td><td>Y轴方向栅格数量</td></tr><tr><td>16-19</td><td>float</td><td>地图分辨率，每个格子的边长，单位米</td></tr><tr><td>20-31</td><td>byte[]</td><td>预留</td></tr><tr><td>32-35</td><td>uint32</td><td>后续数据的字节数，该值应当等于X轴栅格数*Y轴栅格数</td></tr><tr><td>36-End</td><td>byte[]</td><td>地图数据，每个字节代表一个格子</td></tr></table> ",
        "operationId": "getExploreMap",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/api/core/slam/v1/maps/stcm": {
      "get": {
        "tags": [
          "slam"
        ],
        "summary": "获取复合地图",
        "description": "包含所有数据的复合地图 </br> 响应报文为二进制字节流，可直接保存为stcm文件.",
        "operationId": "getCompositeMap",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "slam"
        ],
        "summary": "设置复合地图",
        "description": "将地图设置到slamware系统中, 以二进制方式读取stcm文件作为request body。</br>机器人位姿会被重置到原点，需要重新设置机器人位姿.<br/> 【注意】地图不会持久化保存，重启后即失效",
        "operationId": "setCompositeMap",
        "requestBody": {
          "content": {
            "application/octet-stream": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/core/slam/v1/maps": {
      "delete": {
        "tags": [
          "slam"
        ],
        "summary": "清空地图",
        "operationId": "clearMap",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/core/slam/v1/maps/origin": {
      "put": {
        "tags": [
          "slam"
        ],
        "summary": "移动地图原点",
        "description": "移动地图原点,并更新到slamware系统中",
        "operationId": "moveOriginPoint",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "new_origin": {
                    "$ref": "#/components/schemas/Point"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/core/firmware/v1/newversion": {
      "get": {
        "tags": [
          "firmware"
        ],
        "summary": "查询新版本固件",
        "operationId": "getNewVersion",
        "description": "从云端查询可升级的新版本固件信息，如果没有则返回空数据",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/FirmwareInfo"
                    },
                    {
                      "type": "object"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/api/core/firmware/v1/autoupdate/:enable": {
      "get": {
        "tags": [
          "firmware"
        ],
        "summary": "是否支持自动升级",
        "description": "上传固件到思岚云并发布给指定设备，如果设备支持自动升级，就会在指定时间段内自动升级固件。",
        "operationId": "getEnableAutoUpdate",
        "responses": {
          "200": {
            "$ref": "#/components/responses/BooleanResponse"
          }
        }
      },
      "put": {
        "tags": [
          "firmware"
        ],
        "summary": "开启/关闭自动升级",
        "description": "关闭自动升级后将会忽略云端发布的最新固件。",
        "operationId": "setEnableAutoUpdate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "enable": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/core/firmware/v1/autoupdate/:start": {
      "post": {
        "tags": [
          "firmware"
        ],
        "summary": "开始自动固件升级",
        "description": "查询思岚云上可升级的最新固件，下载固件并升级。",
        "operationId": "startUpdate",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "boolean"
                    },
                    "reason": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/core/firmware/v1/update/:start": {
      "post": {
        "tags": [
          "firmware"
        ],
        "summary": "上传固件升级",
        "description": "将固件包以二进制方式读取作为request body，上传至机器人用于固件升级。<h4>所需最低固件版本：4.6.3</h4>",
        "operationId": "uploadAndStartUpdate",
        "requestBody": {
          "content": {
            "application/octet-stream": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "boolean"
                    },
                    "msg": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/core/firmware/v1/progress": {
      "get": {
        "tags": [
          "firmware"
        ],
        "summary": "获取固件升级进度",
        "operationId": "getFirmwareProgress",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "current_step": {
                      "type": "integer",
                      "description": "0:Preparing, 1:PrepareFinished, 2:Downloding, 3:DownloadFinished, 4:Updating, 5:UpdateFinished",
                      "enum": [
                        0,
                        1,
                        2,
                        3,
                        4,
                        5
                      ]
                    },
                    "current_step_name": {
                      "type": "string"
                    },
                    "current_step_progress": {
                      "type": "integer",
                      "description": "当前步骤的进度, 0~100"
                    },
                    "toptalSteps": {
                      "type": "integer"
                    },
                    "status": {
                      "type": "integer",
                      "description": "0:Success, 1:Error, 2:Init, 3:Upgrade",
                      "enum": [
                        0,
                        1,
                        2,
                        3
                      ]
                    },
                    "error_code": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/core/statistics/v1/odometry": {
      "get": {
        "tags": [
          "statistics"
        ],
        "summary": "获取运行里程",
        "operationId": "getOdometry",
        "description": "机器人总的运行里程，单位米",
        "responses": {
          "200": {
            "$ref": "#/components/responses/DoubleResponse"
          }
        }
      }
    },
    "/api/core/statistics/v1/runtime": {
      "get": {
        "tags": [
          "statistics"
        ],
        "summary": "获取运行时间",
        "operationId": "getRuntime",
        "description": "机器人总的运行时间，单位秒",
        "responses": {
          "200": {
            "$ref": "#/components/responses/DoubleResponse"
          }
        }
      }
    },
    "/api/core/sensors/v1/depth/:enable": {
      "put": {
        "tags": [
          "sensors"
        ],
        "summary": "使能/禁用深度摄像头数据",
        "description": "用户设置是否使用深度摄像头数据",
        "operationId": "setDepthSensorState",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "enable": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/core/sensors/v1/masks": {
      "get": {
        "tags": [
          "sensors"
        ],
        "summary": "获取传感器禁用状态",
        "description": "获取禁用状态的传感器掩码信息。",
        "operationId": "getDisabledSensorsMaskData",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DisabledSensorMaskData"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "sensors"
        ],
        "summary": "使能/禁用传感器",
        "description": "设置传感器掩码。",
        "operationId": "setSensorMask",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SensorMaskCtrlData"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/BooleanResponse"
          }
        }
      }
    },
    "/api/core/application/v1/apps": {
      "get": {
        "tags": [
          "application"
        ],
        "summary": "获取所有自定义安装的APP",
        "operationId": "getApps",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "version": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "application"
        ],
        "summary": "安装APP",
        "operationId": "installApp",
        "requestBody": {
          "content": {
            "application/octet-stream": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "500": {
            "description": "Failed to install application"
          }
        }
      }
    },
    "/api/core/application/v1/apps/{app_name}": {
      "delete": {
        "tags": [
          "application"
        ],
        "summary": "卸载一个APP",
        "operationId": "deleteApp",
        "parameters": [
          {
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/platform/v1/timestamp": {
      "get": {
        "tags": [
          "platform"
        ],
        "summary": "获取系统时间戳",
        "operationId": "getTimestamp",
        "description": "获取系统启动以来的毫秒数, 返回值为字符串格式的整数。<h4>所需最低固件版本 4.2.4</h4>",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "integer"
                }
              }
            }
          }
        }
      }
    },
    "/api/platform/v1/events": {
      "get": {
        "tags": [
          "platform"
        ],
        "summary": "获取事件信息",
        "operationId": "getEvents",
        "description": "获取机器人发生的事件，上位机可以播报语音或进行别的交互，启用不同的插件会扩展出不同的事件类型。 ",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RobotEvent"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/multi-floor/status": {
      "get": {
        "tags": [
          "multi-floor"
        ],
        "summary": "获取地图状态信息",
        "operationId": "getStatus",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "is_in_mapping_mode": {
                      "type": "boolean",
                      "description": "是否处于建图模式"
                    },
                    "map_load_status": {
                      "type": "string",
                      "description": "* `NOT_LOADED`本地没有地图文件。\n* `LOADING` 正在加载地图。\n* `LOADED`成功加载地图。\n* `LOADING_SKIPPED` 跳过地图加载步骤，在人为重启单个服务时会进入该状态。\n* `NEED_LOAD` 执行任务过程中收到同步云端地图的命令，会等回桩后再自动同步地图。\n* `ERROR` 状态异常，地图文件错误或启动楼层信息不匹配\n",
                      "enum": [
                        "NOT_LOADED",
                        "LOADING",
                        "LOADED",
                        "LOADING_SKIPPED",
                        "NEED_LOAD",
                        "ERROR"
                      ]
                    },
                    "is_managed_by_cloud": {
                      "type": "boolean",
                      "description": "是否由云端管理"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/multi-floor/map/v1/floors": {
      "get": {
        "tags": [
          "multi-floor"
        ],
        "summary": "获取所有楼层信息",
        "operationId": "getFloors",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FloorInfo"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/multi-floor/map/v1/floors/:current": {
      "get": {
        "tags": [
          "multi-floor"
        ],
        "summary": "获取机器人所在楼层信息",
        "operationId": "getCurrentFloor",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CurrentFloorInfo"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "multi-floor"
        ],
        "summary": "设置机器人所在楼层信息",
        "description": "正常情况下应当由机器人在乘坐电梯过程中自主切换楼层，该接口仅供特殊情况下（如人工搬运机器人）使用。",
        "operationId": "setCurrentFloor",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "floor"
                ],
                "properties": {
                  "building": {
                    "type": "string"
                  },
                  "floor": {
                    "type": "string"
                  },
                  "pose": {
                    "$ref": "#/components/schemas/Pose2D"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/multi-floor/map/v1/pois": {
      "get": {
        "tags": [
          "multi-floor"
        ],
        "summary": "获取POI信息",
        "description": "通过参数指定楼层，不带参数时获取所有楼层的POI。",
        "operationId": "getAllPois",
        "parameters": [
          {
            "in": "query",
            "name": "floor",
            "description": "楼层名",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "building",
            "description": "建筑物名",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MultiFloorPoiInfo"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid floor or building"
          }
        }
      }
    },
    "/api/multi-floor/map/v1/pois/:search_nearby": {
      "post": {
        "tags": [
          "multi-floor"
        ],
        "summary": "查找最近的POI",
        "operationId": "searchNearbyPoi",
        "description": "查找离机器人最近的POI信息。其中name有三个特殊值，ON_DOCK表示在桩上，IN_ELEVATOR表示在电梯内，UNKNOWN表示没有POI，此时没有relative_pose字段，其他的值均表示地图中添加的常规POI的名称。",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NearbyPoiInfo"
                }
              }
            }
          }
        }
      }
    },
    "/api/multi-floor/map/v1/pois/:dispatch": {
      "post": {
        "tags": [
          "multi-floor"
        ],
        "summary": "查询POI的最优遍历顺序",
        "description": "给定若干个POI名称，返回调整顺序后的POI名称，使得机器人依次遍历这些POI并回到当前位置的总路径最短。</br>【注】该接口耗时随着POI数量指数增长，请勿传入大量POI。<h4>所需最低固件版本 4.5.0</h4>",
        "operationId": "dispatchByPois",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "example": [
                  "101",
                  "103",
                  "102"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "example": [
                    "101",
                    "102",
                    "103"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/api/multi-floor/map/v1/homedocks": {
      "get": {
        "tags": [
          "multi-floor"
        ],
        "summary": "获取充电桩信息",
        "parameters": [
          {
            "in": "query",
            "name": "floor",
            "description": "楼层名",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "building",
            "description": "建筑物名",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "description": "通过Query参数指定楼层，不带参数时获取所有楼层的充电桩",
        "operationId": "getMutilFloorHomeDocks",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MultiFloorDockInfo"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/multi-floor/map/v1/homedocks/:current": {
      "get": {
        "tags": [
          "multi-floor"
        ],
        "summary": "获取绑定的充电桩",
        "operationId": "getCurrentHomeDock",
        "description": "获取机器人当前绑定的充电桩信息，如果没绑定过或dock id无效，返回的result为false。",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "boolean"
                    },
                    "msg": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/MultiFloorDockInfo"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "multi-floor"
        ],
        "summary": "绑定充电桩",
        "operationId": "setCurrentHomeDock",
        "description": "【注意】如果绑定的充电桩不在启动楼层，则需要先将机器人推到充电桩上，然后调用本接口，此时会同步修改启动楼层并重置地图。",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "dock_id": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/multi-floor/map/v1/homedocks/:search_nearby": {
      "post": {
        "tags": [
          "multi-floor"
        ],
        "summary": "查找离机器人最近的充电桩",
        "operationId": "searchNearbyHomeDock",
        "description": "调用该接口前请确保机器人定位准确。",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MultiFloorDockInfo"
                }
              }
            }
          }
        }
      }
    },
    "/api/multi-floor/map/v1/stcm": {
      "post": {
        "tags": [
          "multi-floor"
        ],
        "summary": "上传地图到机器人",
        "description": "上传的地图会持久化保存在文件系统中, 但不会加载到Slamware中。<br/> 【注意】当机器人由云端管理时，从云端下载的地图会覆盖本地地图。",
        "operationId": "uploadMap",
        "requestBody": {
          "content": {
            "application/octet-stream": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "tags": [
          "multi-floor"
        ],
        "summary": "删除保存的地图",
        "description": "不会清空内存中的当前地图，而是删除文件系统中缓存的地图",
        "operationId": "deleteMap",
        "responses": {
          "204": {
            "description": "OK"
          }
        }
      }
    },
    "/api/multi-floor/map/v1/stcm/:save": {
      "post": {
        "tags": [
          "multi-floor"
        ],
        "summary": "持久化保存当前地图",
        "operationId": "saveStcm",
        "description": "从Slamware中读取地图并保存到文件。<br/> 【注意】 多楼层环境中禁止该操作，否则会丢失其他楼层的地图。",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/multi-floor/map/v1/stcm/:reload": {
      "post": {
        "tags": [
          "multi-floor"
        ],
        "summary": "重新加载地图",
        "description": "重新加载地图，优先尝试从云端下载，下载失败或机器人不受云端管理时从本地文件读取。<br/> pose为可选字段，pose为空时设置机器人位姿到充电桩前。 <br/>【注意】系统启动时会自动加载地图，该接口一般在部署阶段地图有变更时才需要调用。",
        "operationId": "reloadStcm",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "pose": {
                    "$ref": "#/components/schemas/Pose3D"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/multi-floor/map/v1/stcm/:sync": {
      "post": {
        "tags": [
          "multi-floor"
        ],
        "summary": "同步地图",
        "description": "保存当前地图到文件，并重新加载，相当于save和reload 2个接口的组合。<br/>【注意】 多楼层环境中禁止该操作，否则会丢失其他楼层的地图。<h4>所需最低固件版本  4.2.4</h4>",
        "operationId": "syncStcm",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/multi-floor/map/v1/scene/unbind": {
      "post": {
        "tags": [
          "multi-floor"
        ],
        "summary": "解绑云端场景",
        "description": "将机器人与云端场景解除绑定，并删除本地地图，在机器人需要换场景部署时调用。<h4>所需最低固件版本  6.2.0</h4>",
        "operationId": "unbindScene",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "keep_local_map": {
                    "type": "boolean",
                    "description": "是否保留机器本地地图，true表示保留"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/multi-floor/map/v1/search_path_points": {
      "post": {
        "tags": [
          "multi-floor"
        ],
        "summary": "通过轨道搜索路径点",
        "description": "在轨道构成的图中，搜索起点到终点的可行路径。",
        "operationId": "searchPathPointsInGraph",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "end_point"
                ],
                "description": "如果不指定起点则以机器人位置作为起点",
                "properties": {
                  "building": {
                    "type": "string",
                    "description": "楼栋(不传使用机器人当前楼栋)"
                  },
                  "floor": {
                    "type": "string",
                    "description": "楼层(不传使用机器人当前楼层)"
                  },
                  "start_point": {
                    "$ref": "#/components/schemas/Point"
                  },
                  "end_point": {
                    "$ref": "#/components/schemas/Point"
                  },
                  "with_direction": {
                    "type": "boolean",
                    "description": "图搜索是否都带方向(默认为false)"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/PathPointsResponse"
          }
        }
      }
    },
    "/api/multi-floor/localization/v1/pose": {
      "put": {
        "tags": [
          "multi-floor"
        ],
        "summary": "设置机器人位姿",
        "description": "将机器人位姿设置到指定的POI上，一般用于发生异常后的恢复操作。<h4>所需最低固件版本 4.5.3</h4>",
        "operationId": "setPoseByPOI",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "poi_name": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/BooleanResponse"
          }
        }
      }
    },
    "/api/multi-floor/localization/v1/homedock": {
      "put": {
        "tags": [
          "multi-floor"
        ],
        "summary": "根据充电桩重置机器人定位",
        "description": "将机器人位姿设置到指定的充电桩前，一般用于发生异常后的恢复操作。<h4>所需最低固件版本 6.2.0</h4>",
        "operationId": "setPoseByHomedock",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "dock_id": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/multi-floor/map/v1/elevators": {
      "get": {
        "tags": [
          "multi-floor"
        ],
        "summary": "获取电梯区域",
        "operationId": "getElevators",
        "description": "获取电梯区域内的元素，包括电梯ID以及等待点。",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ElevatorInfo"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/multi-floor/map/v1/elevators/{elevator_id}": {
      "get": {
        "tags": [
          "multi-floor"
        ],
        "summary": "获取某个电梯的信息",
        "operationId": "getElevatorsByID",
        "parameters": [
          {
            "in": "path",
            "name": "elevator_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ElevatorInfo"
                }
              }
            }
          },
          "400": {
            "description": "Unknown Elevator ID"
          }
        }
      }
    },
    "/api/multi-floor/map/v1/elevators/{elevator_id}/pose_relation": {
      "get": {
        "tags": [
          "multi-floor"
        ],
        "summary": "获取机器人与电梯的位置关系",
        "operationId": "getPoseRelationToElevator",
        "parameters": [
          {
            "in": "path",
            "name": "elevator_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "in_elevator",
                    "close_to_elevator_sill",
                    "out_of_elevator"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Unknown Elevator ID"
          }
        }
      }
    },
    "/api/industry/v1/tasks/templates": {
      "post": {
        "tags": [
          "industry"
        ],
        "summary": "创建任务模板",
        "description": "创建一个呼叫器任务模板",
        "operationId": "createTaskTemplate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskTemplateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskTemplate"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "industry"
        ],
        "summary": "获取任务模板",
        "description": "获取当前设备所属场景下的所有任务模板",
        "operationId": "getTaskTemplates",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TaskTemplate"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/industry/v1/tasks/templates/{key_id}": {
      "delete": {
        "tags": [
          "industry"
        ],
        "summary": "删除任务模板",
        "operationId": "deleteTaskTemplate",
        "description": "删除一个任务模板",
        "parameters": [
          {
            "in": "path",
            "name": "key_id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/CommonResponse"
          }
        }
      }
    },
    "/api/industry/v1/tasks": {
      "get": {
        "tags": [
          "industry"
        ],
        "summary": "查询任务信息",
        "operationId": "getIndustryTasks",
        "description": "默认返回ready和running状态的所有类型的任务，status为all时表示查询最近的所有任务，包括已成功完成和失败的任务。",
        "parameters": [
          {
            "in": "query",
            "name": "type",
            "required": false,
            "schema": {
              "type": "string",
              "description": "carry_calling_by_template 绑定模板的呼叫器任务，carry_calling 常规呼叫器任务，industry：工业配送任务",
              "enum": [
                "carry_calling_by_template",
                "carry_calling",
                "industry"
              ]
            }
          },
          {
            "in": "query",
            "name": "status",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "ready",
                "running",
                "succeeded",
                "failed",
                "all"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IndustryTask"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/industry/v1/tasks/events": {
      "post": {
        "tags": [
          "industry"
        ],
        "summary": "推送任务事件",
        "operationId": "postTaskEvent",
        "description": "上位机执行呼叫器任务时，通过该接口推送任务事件，同时更新任务状态。",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "task_id": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "status": {
                    "type": "string",
                    "description": "任务状态，RUNNING：开始执行任务，FAILED：任务失败，SUCCEEDED：任务成功完成",
                    "enum": [
                      "RUNNING",
                      "SUCCEEDED",
                      "FAILED"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/delivery/v1/admin/password": {
      "get": {
        "tags": [
          "delivery"
        ],
        "summary": "获取操作密码",
        "description": "expires表示密码过期时间，如果不包含这个字段则意味着密码永久有效，enable表示是否启用操作密码",
        "operationId": "getPassword",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "delivery_admin_password": {
                      "type": "object",
                      "required": [
                        "enable"
                      ],
                      "properties": {
                        "enable": {
                          "type": "boolean"
                        },
                        "password": {
                          "type": "string"
                        },
                        "expires": {
                          "type": "string",
                          "format": "date-time"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "delivery"
        ],
        "summary": "设置操作密码",
        "operationId": "setPassword",
        "description": "如果enable为false，则表示禁用密码",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "enable"
                ],
                "properties": {
                  "enable": {
                    "type": "boolean"
                  },
                  "password": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/OperationResultResponse"
          }
        }
      }
    },
    "/api/delivery/v1/admin/mode": {
      "get": {
        "tags": [
          "delivery"
        ],
        "summary": "获取机器人工作模式",
        "operationId": "getWorkMode",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeliveryWorkMode"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "delivery"
        ],
        "summary": "设置机器人工作模式",
        "operationId": "setWorkMode",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeliveryWorkMode"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/OperationResultResponse"
          }
        }
      }
    },
    "/api/delivery/v1/admin/language": {
      "get": {
        "tags": [
          "delivery"
        ],
        "summary": "获取机器人语言",
        "operationId": "getLanguage",
        "description": "<h4>所需最低固件版本 4.3.2</h4>",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "language": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "delivery"
        ],
        "summary": "设置机器人语言",
        "operationId": "setLanguage",
        "description": "<h4>所需最低固件版本 4.3.2</h4>",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "language": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/OperationResultResponse"
          }
        }
      }
    },
    "/api/delivery/v1/admin/working_time": {
      "get": {
        "tags": [
          "delivery"
        ],
        "summary": "获取机器人工作时间",
        "operationId": "getWorkingTime",
        "description": "<h4>所需最低固件版本 4.3.3</h4>",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkingTime"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "delivery"
        ],
        "summary": "设置机器人工作时间",
        "operationId": "setWorkingTime",
        "description": "<h4>所需最低固件版本 4.3.3</h4>",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkingTime"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/OperationResultResponse"
          }
        }
      }
    },
    "/api/delivery/v1/admin/move_options": {
      "get": {
        "tags": [
          "delivery"
        ],
        "summary": "获取运动选项",
        "operationId": "getMoveOptions",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MoveOptions"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "delivery"
        ],
        "summary": "设置运动选项",
        "operationId": "setMoveOptions",
        "description": "设置在配送过程中采用的运动选项，比如采用自由导航还是轨道模式。当请求报文为空时表示删除已设置的内容，恢复默认选项。不需要包含包含所有字段，按需设置即可。",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MoveOptions"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/OperationResultResponse"
          }
        }
      }
    },
    "/api/delivery/v1/admin/line_speed": {
      "get": {
        "tags": [
          "delivery"
        ],
        "summary": "获取配送速度和返航速度",
        "operationId": "getLineSpeed",
        "description": "<h4>所需最低固件版本 4.5.3</h4>",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "delivery_speed": {
                      "type": "number"
                    },
                    "return_speed": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "delivery"
        ],
        "summary": "设置配送速度和返航速度",
        "operationId": "setLineSpeed",
        "description": "<h4>所需最低固件版本 4.5.3</h4>",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "delivery_speed": {
                    "type": "number"
                  },
                  "return_speed": {
                    "type": "number"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/delivery/v1/configurations": {
      "get": {
        "tags": [
          "delivery"
        ],
        "summary": "获取机器配置信息",
        "operationId": "getConfigurations",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "device_sn": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "firmware_version": {
                      "type": "string"
                    },
                    "is_manage_by_cloud": {
                      "type": "boolean"
                    },
                    "enable_recovery_on_parking": {
                      "type": "boolean"
                    },
                    "cargos": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Cargo"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/delivery/v1/settings": {
      "get": {
        "tags": [
          "delivery"
        ],
        "summary": "获取配送相关的设置信息",
        "operationId": "getDeliverySettings",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "delivery_settings": {
                      "$ref": "#/components/schemas/DeliverySettings"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/delivery/v1/settings/timeout": {
      "put": {
        "tags": [
          "delivery"
        ],
        "summary": "设置任务的超时时间",
        "operationId": "setTimeoutSettings",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "food_pickup_timeout": {
                    "description": "送餐到达目的地后的最长等待时间",
                    "type": "integer"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/delivery/v1/voice_resources": {
      "get": {
        "tags": [
          "delivery"
        ],
        "summary": "获取语音包信息",
        "operationId": "getVoiceResources",
        "description": "从云端获取语音包信息，网络不好时该接口可能耗时较久。<h4>所需最低固件版本 4.3.2</h4>",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "boolean"
                    },
                    "msg": {
                      "type": "string"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "version": {
                            "type": "string"
                          },
                          "content": {
                            "type": "string"
                          },
                          "interval_count": {
                            "type": "integer"
                          },
                          "play_type": {
                            "type": "integer"
                          },
                          "repeat_count": {
                            "type": "integer"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/delivery/v1/cargos": {
      "get": {
        "tags": [
          "delivery"
        ],
        "summary": "获取所有Cargo信息",
        "operationId": "getCargos",
        "description": "只有带货仓的机型支持cargos系列接口",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Cargo"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/delivery/v1/cargos/{cargo_id}/boxes": {
      "get": {
        "tags": [
          "delivery"
        ],
        "summary": "获取某个Cargo所有Box信息",
        "operationId": "getCargoBoxes",
        "parameters": [
          {
            "in": "path",
            "name": "cargo_id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Box"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Cargo not found"
          }
        }
      }
    },
    "/api/delivery/v1/cargos/{cargo_id}/boxes/{box_id}": {
      "get": {
        "tags": [
          "delivery"
        ],
        "summary": "获取Box信息",
        "operationId": "getCargoBox",
        "parameters": [
          {
            "in": "path",
            "name": "cargo_id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
            }
          },
          {
            "in": "path",
            "name": "box_id",
            "required": true,
            "example": 0,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Box"
                }
              }
            }
          },
          "400": {
            "description": "Invalid BoxId"
          },
          "404": {
            "description": "Box not found"
          }
        }
      }
    },
    "/api/delivery/v1/cargos/{cargo_id}/boxes/{box_id}/{op}": {
      "put": {
        "tags": [
          "delivery"
        ],
        "summary": "操作Box",
        "operationId": "operateBox",
        "parameters": [
          {
            "in": "path",
            "name": "cargo_id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
            }
          },
          {
            "in": "path",
            "name": "box_id",
            "required": true,
            "example": 0,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "op",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                ":open",
                ":close"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Invalid Operation"
          }
        }
      }
    },
    "/api/delivery/v1/cargos/{cargo_id}/boxes/{box_id}/operation_result": {
      "get": {
        "tags": [
          "delivery"
        ],
        "summary": "查询Box操作结果",
        "operationId": "getOperationResult",
        "parameters": [
          {
            "in": "path",
            "name": "cargo_id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
            }
          },
          {
            "in": "path",
            "name": "box_id",
            "required": true,
            "example": 0,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "description": "最近一次舱体操作的类型 OPEN:开门，CLOSE:关门",
                      "enum": [
                        "OPEN",
                        "CLOSE"
                      ]
                    },
                    "stage": {
                      "type": "string",
                      "description": "操作进度，IN_PROGRESS 执行中， DONE 成功完成， FAILED 失败",
                      "enum": [
                        "IN_PROGRESS",
                        "DONE",
                        "FAILED"
                      ]
                    },
                    "reason": {
                      "type": "string"
                    },
                    "cargo_id": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "box": {
                      "$ref": "#/components/schemas/Box"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/delivery/v1/cargos/assigned": {
      "get": {
        "tags": [
          "delivery"
        ],
        "summary": "获取被占用的外卖舱",
        "operationId": "getAssignedCargos",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AssignedCargoEntry"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/delivery/v1/tasks": {
      "get": {
        "tags": [
          "delivery"
        ],
        "summary": "查询任务信息",
        "operationId": "getTasks",
        "description": "默认返回ready和running状态的所有类型的任务，status为all时表示查询最近的所有任务，包括已成功完成和失败的任务。",
        "parameters": [
          {
            "in": "query",
            "name": "type",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "takeout",
                "retail",
                "collect",
                "refill",
                "food_delivery",
                "recycle",
                "return",
                "call"
              ]
            }
          },
          {
            "in": "query",
            "name": "status",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "ready",
                "running",
                "succeeded",
                "failed",
                "all"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DeliveryTask"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "delivery"
        ],
        "summary": "创建任务",
        "operationId": "createTask",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostTaskRequestEntry"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "result"
                  ],
                  "properties": {
                    "result": {
                      "type": "boolean"
                    },
                    "order_id": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "delivery"
        ],
        "summary": "取消所有任务",
        "operationId": "cancelAllTasks",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/delivery/v1/tasks/:batch": {
      "post": {
        "tags": [
          "delivery"
        ],
        "summary": "批量创建任务",
        "operationId": "createTasks",
        "description": "一次性创建多个任务 <h4>所需最低固件版本 4.3.0</h4>",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PostTaskRequestEntry"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "result"
                  ],
                  "properties": {
                    "result": {
                      "type": "boolean"
                    },
                    "order_ids": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/delivery/v1/tasks/{task_id}": {
      "delete": {
        "tags": [
          "delivery"
        ],
        "summary": "根据Task ID取消任务",
        "operationId": "cancelTaskByTaskId",
        "description": "有些任务是通过云端下发的，可能不存在订单号，因此需要通过Task ID来取消",
        "parameters": [
          {
            "in": "path",
            "name": "task_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/delivery/v1/tasks/orders/{order_id}": {
      "delete": {
        "tags": [
          "delivery"
        ],
        "summary": "根据订单ID取消任务",
        "operationId": "cancelTaskByOrderId",
        "description": "在机器人端创建的任务，都会包含订单号，因此可以通过订单号取消任务",
        "parameters": [
          {
            "in": "path",
            "name": "order_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/delivery/v1/stage": {
      "get": {
        "tags": [
          "delivery"
        ],
        "summary": "获取当前任务状态",
        "operationId": "getStage",
        "description": "* `DEVICE_ERROR` 设备故障，底盘上报了Error信息，机器人无法移动，上位机应当显示故障页面。\n* `GOING_TO_TASK_POINT` 正在前往任务点，有些任务（如回盘、取物配送）需要中途停靠某些任务点，完成操作后再前往目标点。\n* `ARRIVED_AT_TASK_POINT` 到达任务点，机器人会等待操作完成或超时后再继续下一阶段。\n* `ON_DELIVERING` 正在前往目标点，为了兼容采用该名称，实际不一定是配送任务。\n* `ARRIVED_AT_TARGET` 到达最终目标点。\n* `ON_RETURNING` 正在返航，当机器人有默认停靠点时，该状态表示机器人正在前往该停靠点。\n* `GOING_HOME`  正在回桩。\n* `IDLE` 空闲，机器人在默认停靠点或桩上时处于该状态。\n",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskStage"
                }
              }
            }
          }
        }
      }
    },
    "/api/delivery/v1/tasks/:task_execution": {
      "put": {
        "tags": [
          "delivery"
        ],
        "summary": "暂停/继续执行任务",
        "operationId": "setTaskExecution",
        "description": "当用户操作APP时，设为false来禁止机器人移动，此时机器人即使收到任务也不会运行；用户完成操作时，设为true允许机器人运动，此时机器人有任务则执行任务，没任务则回桩或回到类型为PARKING的POI",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskExecutionInfo"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskExecutionInfo"
                }
              }
            }
          }
        }
      }
    },
    "/api/delivery/v1/tasks/:task_finish": {
      "put": {
        "tags": [
          "delivery"
        ],
        "summary": "结束所有任务",
        "description": "与Delete接口的区别是本接口以成功状态结束所有任务。",
        "operationId": "endTask",
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/api/delivery/v1/tasks/:start_pickup": {
      "put": {
        "tags": [
          "delivery"
        ],
        "summary": "开始取物",
        "description": "通知机器人用户开始取物，一般用于带舱体的机器人，在该接口后再调用开舱指令进行取物，完成后调用end_pickup，如果任务包含多个舱体，则此时自动打开下一个舱门，上位机需要多次调用end_pickup。",
        "operationId": "startPickup",
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/api/delivery/v1/tasks/:end_pickup": {
      "put": {
        "tags": [
          "delivery"
        ],
        "summary": "结束取物",
        "description": "通知机器人用户已完成取物。",
        "operationId": "endPickup",
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/api/delivery/v1/tasks/:end_operation": {
      "put": {
        "tags": [
          "delivery"
        ],
        "summary": "完成操作",
        "description": "机器人到达任务点时，该接口用于通知机器人用户已完成操作，可以继续执行任务。",
        "operationId": "endOperation",
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Capability": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "* `slamware.agent.core` 定位导航等底盘核心通用功能\n* `slamware.agent.platform` 日志采集等平台通用功能\n* `slamware.agent.multi_floor` 多楼层地图管理和跨楼层移动功能\n* `slamware.agent.delivery` 配送服务功能\n* `slamware.agent.mercury2` 支持云端调度的智能酒店配送服务功能\n",
            "enum": [
              "slamware.agent.core",
              "slamware.agent.platform",
              "slamware.agent.multi_floor",
              "slamware.agent.delivery",
              "slamware.agent.mercury2"
            ]
          },
          "version": {
            "type": "string",
            "example": "4.0.0"
          },
          "enabled": {
            "type": "boolean",
            "description": "插件初始化失败，或者刚启动时该值为false，上位机应当继续等待一段时间，直到该值变成true或者超时。"
          }
        }
      },
      "PowerStatus": {
        "type": "object",
        "properties": {
          "batteryPercentage": {
            "type": "integer",
            "example": 90,
            "description": "电池电量百分比，0 ~ 100"
          },
          "dockingStatus": {
            "type": "string",
            "description": "对桩状态",
            "enum": [
              "on_dock",
              "not_on_dock"
            ]
          },
          "isCharging": {
            "type": "boolean",
            "description": "是否正在充电"
          },
          "isDCConnected": {
            "type": "boolean",
            "example": false,
            "description": "外部电源是否连接"
          },
          "powerStage": {
            "type": "string",
            "example": "running",
            "description": "电源状态",
            "enum": [
              "starting",
              "running",
              "restarting",
              "shutingdown",
              "error"
            ]
          },
          "sleepMode": {
            "type": "string",
            "description": "休眠状态",
            "enum": [
              "awake",
              "waking_up",
              "asleep"
            ]
          }
        }
      },
      "DeviceInfo": {
        "type": "object",
        "properties": {
          "manufacturerId": {
            "type": "integer",
            "example": 255,
            "description": "制造商ID"
          },
          "manufacturerName": {
            "type": "string",
            "example": "Slamtec",
            "description": "制造商名称"
          },
          "modelId": {
            "type": "integer",
            "example": 43792,
            "description": "设备型号ID"
          },
          "modelName": {
            "type": "string",
            "example": "Apollo",
            "description": "设备型号名称"
          },
          "deviceID": {
            "type": "string",
            "format": "uuid",
            "example": "D2E6D7C0F7ABF29EDFEAFEFE1C781D09",
            "description": "设备序列号"
          },
          "hardwareVersion": {
            "type": "string",
            "example": 511,
            "description": "硬件版本号"
          },
          "softwareVersion": {
            "type": "string",
            "example": "3.6.1-rtm+20210807",
            "description": "软件版本号"
          }
        }
      },
      "BaseError": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "component": {
            "type": "integer",
            "example": 1,
            "description": "0 User, 1 System, 2 Power, 3 Motion, 4 Sensor, 255 Unknown",
            "enum": [
              0,
              1,
              2,
              3,
              4,
              255
            ]
          },
          "errorCode": {
            "type": "integer",
            "example": 33621760
          },
          "level": {
            "type": "integer",
            "example": 2,
            "description": "0 Healthy, 1 Warn, 2 Error, 4 Fatal, 255 Unknown",
            "enum": [
              0,
              1,
              2,
              4,
              255
            ]
          },
          "message": {
            "type": "string",
            "example": "motor barke released"
          }
        }
      },
      "BaseHealthInfo": {
        "type": "object",
        "properties": {
          "hasWarning": {
            "type": "boolean",
            "example": false,
            "description": "是否有告警信息"
          },
          "hasError": {
            "type": "boolean",
            "example": true,
            "description": "是否有错误信息"
          },
          "hasFatal": {
            "type": "boolean",
            "example": false,
            "description": "是否有致命错误"
          },
          "baseError": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BaseError"
            }
          }
        }
      },
      "NetworkStatus": {
        "type": "object",
        "properties": {
          "ethip1": {
            "type": "string",
            "example": "192.168.11.1/24",
            "description": "以太网地址"
          },
          "ip": {
            "type": "string",
            "example": "10.6.128.147",
            "description": "IP地址"
          },
          "mac": {
            "type": "string",
            "example": "ec:0e:c4:0a:e4:3b",
            "description": "MAC地址"
          },
          "mode": {
            "type": "string",
            "enum": [
              "STA",
              "AP"
            ]
          },
          "quality": {
            "type": "integer",
            "example": 100,
            "description": "网络质量"
          },
          "ssid": {
            "type": "string"
          }
        }
      },
      "ApModeOptions": {
        "type": "object",
        "description": "ssid和password均为可选项，默认从配置文件设置热点名称",
        "properties": {
          "ssid": {
            "type": "string",
            "example": "Slamware-58660D"
          },
          "password": {
            "type": "string"
          }
        }
      },
      "StationModeOptions": {
        "type": "object",
        "required": [
          "ssid",
          "password"
        ],
        "properties": {
          "ssid": {
            "type": "string",
            "example": "Slamtec-Test"
          },
          "password": {
            "type": "string"
          }
        }
      },
      "RouteStatus": {
        "type": "object",
        "properties": {
          "priority": {
            "type": "string",
            "enum": [
              "wifi",
              "4g"
            ],
            "example": "wifi",
            "description": "路由优先级选择:\n  * `wifi` - WIFI 优先\n  * `4g` - 4G 优先\n"
          }
        }
      },
      "ApnStatus": {
        "type": "object",
        "properties": {
          "apn": {
            "type": "string",
            "example": "cmhk",
            "description": "根据地区选择对应apn:\n  例如香港地区：cmhk\n"
          }
        }
      },
      "ActionState": {
        "type": "object",
        "properties": {
          "status": {
            "type": "integer",
            "description": "0:NewBorn, 1:Working, 3:Paused, 4:Done",
            "enum": [
              0,
              1,
              3,
              4
            ]
          },
          "result": {
            "type": "integer",
            "description": "0:Success, -1: Failed, -2: Aborted",
            "enum": [
              0,
              -1,
              -2
            ]
          },
          "reason": {
            "type": "string",
            "default": ""
          }
        }
      },
      "ActionGravestone": {
        "type": "object",
        "properties": {
          "action_id": {
            "type": "integer"
          },
          "state": {
            "$ref": "#/components/schemas/ActionState"
          }
        }
      },
      "ActionInfo": {
        "type": "object",
        "properties": {
          "action_id": {
            "type": "integer"
          },
          "action_name": {
            "type": "string"
          },
          "stage": {
            "type": "string",
            "example": "GOING_TO_TARGET"
          },
          "state": {
            "$ref": "#/components/schemas/ActionState"
          }
        }
      },
      "Pose3D": {
        "type": "object",
        "description": "三维空间的位姿信息",
        "properties": {
          "x": {
            "type": "number"
          },
          "y": {
            "type": "number"
          },
          "z": {
            "type": "number"
          },
          "yaw": {
            "type": "number"
          },
          "pitch": {
            "type": "number"
          },
          "roll": {
            "type": "number"
          }
        }
      },
      "Pose2D": {
        "type": "object",
        "description": "二维平面的位姿信息",
        "properties": {
          "x": {
            "type": "number"
          },
          "y": {
            "type": "number"
          },
          "yaw": {
            "type": "number"
          }
        }
      },
      "Location": {
        "type": "object",
        "properties": {
          "x": {
            "type": "number"
          },
          "y": {
            "type": "number"
          },
          "z": {
            "type": "number"
          }
        }
      },
      "Point": {
        "type": "object",
        "properties": {
          "x": {
            "type": "number"
          },
          "y": {
            "type": "number"
          }
        }
      },
      "Quaternion": {
        "type": "object",
        "properties": {
          "w": {
            "type": "number"
          },
          "x": {
            "type": "number"
          },
          "y": {
            "type": "number"
          },
          "z": {
            "type": "number"
          }
        }
      },
      "PathPoints": {
        "type": "array",
        "description": "x、y坐标构成的路径点，每个元素为包含两个浮点数的数组，分别为x、y坐标值",
        "items": {
          "type": "array",
          "items": {
            "type": "number",
            "format": "float"
          },
          "example": [
            0,
            0
          ]
        }
      },
      "LaserScan": {
        "type": "object",
        "description": "pose为观测到该帧激光时的机器人位姿，每个激光点的angle表示激光与机器人正前方的夹角。",
        "properties": {
          "pose": {
            "$ref": "#/components/schemas/Pose3D"
          },
          "laser_points": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "distance": {
                  "type": "number"
                },
                "angle": {
                  "type": "number"
                },
                "valid": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      },
      "EmptyMetadata": {
        "type": "object",
        "description": "metadata是key和value都是字符串的map"
      },
      "BezierCurveMetadata": {
        "type": "object",
        "description": "描述贝塞尔曲线的metadata，control_point1和control_point2是两个控制点的坐标，再加上Line的起点和终点可以确定一个三阶贝塞尔曲线",
        "required": [
          "control_point1",
          "control_point2"
        ],
        "properties": {
          "control_point1": {
            "type": "string",
            "example": "{'x':0.1,'y':0.1}"
          },
          "control_point2": {
            "type": "string",
            "example": "{'x':0.1,'y':0.1}"
          }
        }
      },
      "Line": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "如果是添加线段，id会被忽略，如果是编辑线段，则会修改对应id的线段"
          },
          "start": {
            "$ref": "#/components/schemas/Point"
          },
          "end": {
            "$ref": "#/components/schemas/Point"
          },
          "metadata": {
            "type": "object",
            "description": "如果是直线轨道，metadata为EmptyMetadata，如果是贝塞尔曲线轨道，metadata为BezierCurveMetadata",
            "oneOf": [
              {
                "$ref": "#/components/schemas/EmptyMetadata"
              },
              {
                "$ref": "#/components/schemas/BezierCurveMetadata"
              }
            ]
          }
        }
      },
      "Rectangle": {
        "type": "object",
        "properties": {
          "x": {
            "type": "number"
          },
          "y": {
            "type": "number"
          },
          "width": {
            "type": "number"
          },
          "height": {
            "type": "number"
          }
        }
      },
      "RectangleAreaUsage": {
        "type": "string",
        "description": "* `forbidden_area` 禁行区域，禁止机器人进入该区域\n* `elevator_area` 电梯区域\n* `dangerous_area` 危险区域, 机器人进入该区域后自动减速\n* `coverage_area` 覆盖规划区域，用于清扫和消毒等\n* `maintenance_area` 运维区域，用于将建图范围限制在该区域内\n* `sensor_disable_area` 传感器禁用区域，机器人进入该区域后忽略指定的传感器数据\n* `restricted_area` 限行区域，用于多机调度，可限制同时进入的机器人数量。\n",
        "enum": [
          "forbidden_area",
          "elevator_area",
          "dangerous_area",
          "coverage_area",
          "maintenance_area",
          "sensor_disable_area",
          "restricted_area"
        ]
      },
      "ElevatorAreaMetadata": {
        "type": "object",
        "required": [
          "elevator_id",
          "elevator_sill_width",
          "elevator_scheduling_point_dist"
        ],
        "properties": {
          "elevator_id": {
            "type": "string",
            "format": "uuid",
            "description": "梯控设备序列号"
          },
          "elevator_sill_width": {
            "type": "string",
            "example": "0.4",
            "description": "门槛宽度，从电梯门内侧到门洞外侧的距离"
          },
          "elevator_scheduling_point_dist": {
            "type": "string",
            "example": "1",
            "description": "电梯调度点离电梯门的距离"
          },
          "elevator_door_type": {
            "type": "string",
            "description": "电梯开门方向, 0 正面开门，1 背面开门，2 双向开门",
            "enum": [
              "0",
              "1",
              "2"
            ]
          }
        }
      },
      "ForbiddenAreaMetadata": {
        "type": "object",
        "required": [
          "escape_distance"
        ],
        "properties": {
          "escape_distance": {
            "type": "string",
            "example": "0.4",
            "description": "可逃脱区域大小，从禁区边界往里面计算，单位米."
          }
        }
      },
      "DangerousAreaMetadata": {
        "type": "object",
        "required": [
          "dangerous_area_type"
        ],
        "properties": {
          "dangerous_area_type": {
            "type": "string",
            "description": "危险区域类型, 0 斜坡，1 窄走廊",
            "enum": [
              "0",
              "1"
            ]
          },
          "max_line_speed": {
            "type": "string",
            "example": "0.5",
            "description": "机器人在该区域内的最大线速度, 单位米/秒"
          }
        }
      },
      "SensorDisableAreaMetadata": {
        "type": "object",
        "properties": {
          "sensor_type": {
            "type": "string",
            "description": "传感器类型，0 碰撞，1 跌落，2 超声，3 深度",
            "example": "[0，3]"
          }
        }
      },
      "CoverageAreaMetadata": {
        "type": "object"
      },
      "RestrictedAreaMetadata": {
        "type": "object",
        "properties": {
          "restricted_scheduling_points": {
            "type": "string",
            "description": "限行区域调度点",
            "example": "[{\"x\":\"0.1\",\"y\":\"0.1\"}]"
          },
          "restricted_robots_number_limit": {
            "type": "string",
            "description": "允许同时进入的机器人数量",
            "example": "1"
          }
        }
      },
      "RectangleAreaMetadata": {
        "type": "object",
        "description": "矩形区域的metadata，键值对数据，所有数据都应当序列化成字符串格式。",
        "oneOf": [
          {
            "$ref": "#/components/schemas/EmptyMetadata"
          },
          {
            "$ref": "#/components/schemas/ElevatorAreaMetadata"
          },
          {
            "$ref": "#/components/schemas/ForbiddenAreaMetadata"
          },
          {
            "$ref": "#/components/schemas/DangerousAreaMetadata"
          },
          {
            "$ref": "#/components/schemas/CoverageAreaMetadata"
          },
          {
            "$ref": "#/components/schemas/SensorDisableAreaMetadata"
          },
          {
            "$ref": "#/components/schemas/RestrictedAreaMetadata"
          }
        ]
      },
      "RectangleArea": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "usage": {
            "$ref": "#/components/schemas/RectangleAreaUsage"
          },
          "area": {
            "type": "object",
            "properties": {
              "start": {
                "$ref": "#/components/schemas/Point"
              },
              "end": {
                "$ref": "#/components/schemas/Point"
              },
              "half_width": {
                "type": "number"
              }
            }
          },
          "metadata": {
            "$ref": "#/components/schemas/RectangleAreaMetadata"
          }
        }
      },
      "ImuData": {
        "type": "object",
        "description": "通过按位或运算组合而成的availibilityBitMap表明了哪些数据是有效的",
        "properties": {
          "acc": {
            "$ref": "#/components/schemas/Location"
          },
          "availibilityBitMap": {
            "type": "integer",
            "description": "* `1` 以四元数表示的位姿\n* `2` 校准后的加速度计\n* `4` 校准后的陀螺仪\n* `8` 校准后的罗盘\n* `16` 加速度计原始值\n* `32` 陀螺仪原始值\n* `64` 罗盘原始值\n* `128` 6自由度的位姿信息\n* `256` 9自由度的位姿信息\n* `512` 以欧拉角表示的位姿\n"
          },
          "compass": {
            "$ref": "#/components/schemas/Location"
          },
          "euler_angle": {
            "$ref": "#/components/schemas/Location"
          },
          "gyro": {
            "$ref": "#/components/schemas/Location"
          },
          "quaternion": {
            "$ref": "#/components/schemas/Quaternion"
          },
          "raw_acc": {
            "$ref": "#/components/schemas/Location"
          },
          "raw_compass": {
            "$ref": "#/components/schemas/Location"
          },
          "raw_gyro": {
            "$ref": "#/components/schemas/Location"
          },
          "timestamp": {
            "type": "integer",
            "description": "底盘启动以来经过的毫秒数"
          }
        }
      },
      "FirmwareInfo": {
        "type": "object",
        "properties": {
          "manufacturer": {
            "type": "string",
            "default": "Slamtec"
          },
          "model": {
            "type": "string",
            "default": "Hermes"
          },
          "firmware": {
            "type": "string",
            "default": "4.2.2-rtm+20211011"
          },
          "firmware_id": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "FloorInfo": {
        "type": "object",
        "properties": {
          "building": {
            "type": "string",
            "default": ""
          },
          "floor": {
            "type": "string",
            "example": "1F"
          },
          "order": {
            "type": "integer",
            "description": "如果需要在UI中列出楼层信息，应当按此字段排序"
          },
          "is_default_floor": {
            "type": "boolean",
            "description": "是否为默认楼层，不指定启动楼层时，机器人会设置到默认楼层。所有电梯都需要停靠默认楼层。"
          }
        }
      },
      "CurrentFloorInfo": {
        "type": "object",
        "properties": {
          "building": {
            "type": "string",
            "default": ""
          },
          "floor": {
            "type": "string",
            "example": "1F"
          },
          "elevator": {
            "type": "string",
            "default": "",
            "description": "如果该字段非空则表示机器人还在电梯内。"
          },
          "map_id": {
            "type": "string",
            "format": "uuid",
            "description": "当前所在楼层的地图ID"
          }
        }
      },
      "MultiFloorTarget": {
        "type": "object",
        "properties": {
          "building": {
            "type": "string",
            "default": ""
          },
          "floor": {
            "type": "string",
            "example": "1F"
          },
          "pose": {
            "$ref": "#/components/schemas/Pose2D"
          }
        }
      },
      "PoiType": {
        "type": "string",
        "enum": [
          "ROOM",
          "REFILL",
          "RECEPTION",
          "TABLE",
          "PARKING",
          "RECYCLE",
          "DISINFECT"
        ]
      },
      "SpecialPOIName": {
        "type": "string",
        "description": "* `ON_DOCK` 在桩上\n* `IN_ELEVATOR` 在电梯内\n* `UNKNOWN` 未知，没有POI或软件异常\n",
        "enum": [
          "ON_DOCK",
          "IN_ELEVATOR",
          "UNKNOWN"
        ]
      },
      "NearbyPoiInfo": {
        "type": "object",
        "description": "name字段有三个特殊值，除此之外都表示地图中添加的常规POI名称。relative_pose表示POI相对机器人的位姿，机器人前方为X轴正方向，左侧为Y轴正方向。",
        "required": [
          "name"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/SpecialPOIName"
              },
              {
                "type": "string"
              }
            ]
          },
          "relative_pose": {
            "$ref": "#/components/schemas/Point"
          }
        }
      },
      "MultiFloorPoiInfo": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "poi_name": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/PoiType"
          },
          "floor": {
            "type": "string"
          },
          "building": {
            "type": "string"
          },
          "pose": {
            "$ref": "#/components/schemas/Pose2D"
          }
        }
      },
      "MultiFloorDockInfo": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "dock_name": {
            "type": "string"
          },
          "floor": {
            "type": "string"
          },
          "building": {
            "type": "string"
          },
          "pose": {
            "$ref": "#/components/schemas/Pose2D"
          }
        }
      },
      "PoseEntry": {
        "type": "object",
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "pose": {
            "$ref": "#/components/schemas/Pose2D"
          },
          "metadata": {
            "type": "object",
            "description": "不同的应用场景需要不同的metadata，见每个接口的描述"
          }
        }
      },
      "Box": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "door_status": {
            "type": "string",
            "enum": [
              "OPEN",
              "OPENING",
              "CLOSING",
              "CLOSED",
              "SEMIOPEN"
            ]
          },
          "lock_status": {
            "type": "string",
            "enum": [
              "LOCKED",
              "UNLOCKED"
            ]
          },
          "stock_status": {
            "type": "string",
            "enum": [
              "EMPTY",
              "SEMIFULL",
              "FULL"
            ]
          },
          "status": {
            "type": "string",
            "enum": [
              "EMPTY",
              "NOT_EMPTY",
              "ERROR"
            ]
          },
          "errors": {
            "type": "array",
            "default": [],
            "items": {
              "type": "string"
            }
          }
        }
      },
      "Cargo": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "pos": {
            "type": "integer"
          },
          "orientation": {
            "type": "string",
            "enum": [
              "FRONT",
              "BACK",
              "TOP"
            ]
          },
          "layer": {
            "type": "integer"
          },
          "type": {
            "type": "string",
            "enum": [
              "TAKEOUT",
              "RETAIL"
            ]
          },
          "errors": {
            "type": "array",
            "default": [],
            "items": {
              "type": "string"
            }
          },
          "boxes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Box"
            }
          }
        }
      },
      "CargoEntry": {
        "type": "object",
        "properties": {
          "cargo_id": {
            "type": "string",
            "format": "uuid"
          },
          "boxes": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "000"
            }
          }
        }
      },
      "AssignedCargoEntry": {
        "type": "object",
        "properties": {
          "target": {
            "type": "string"
          },
          "order_id": {
            "type": "string"
          },
          "cargo_id": {
            "type": "string",
            "format": "uuid"
          },
          "boxes": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "000"
            }
          }
        }
      },
      "FailedTask": {
        "type": "object",
        "properties": {
          "target": {
            "type": "string"
          },
          "cargos": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CargoEntry"
            }
          }
        }
      },
      "DeliveryTaskRequest": {
        "type": "object",
        "properties": {
          "target": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "REFILL",
              "COLLECT",
              "TAKEOUT",
              "RETAIL",
              "STATION_TAKEOUT",
              "GUIDE",
              "FOOD_DELIVERY",
              "RETURN",
              "RECYCLE"
            ]
          },
          "req_id": {
            "type": "string"
          },
          "order_id": {
            "type": "string"
          },
          "no_pickup_wait": {
            "type": "boolean"
          },
          "cargos": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CargoEntry"
            }
          },
          "failed_tasks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FailedTask"
            }
          },
          "station_id": {
            "type": "string"
          },
          "station_cargos": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CargoEntry"
            }
          },
          "message": {
            "type": "object"
          }
        }
      },
      "DeliveryPickupResultEntry": {
        "type": "object",
        "description": "包含cargo信息表示舱体的取物结果，包含task_point_id表示任务点的操作结果，二者只存其一",
        "properties": {
          "cargo_id": {
            "type": "string",
            "format": "uuid"
          },
          "box_id": {
            "type": "string",
            "format": "integer",
            "example": 0
          },
          "result": {
            "type": "string",
            "enum": [
              "SUCCEEDED",
              "FAILED"
            ]
          },
          "reason": {
            "type": "string",
            "default": ""
          },
          "task_point_id": {
            "type": "string",
            "default": ""
          }
        }
      },
      "DeliveryTaskEventStage": {
        "type": "string",
        "description": "任务执行阶段",
        "enum": [
          "GOING_TO_ELEVATOR",
          "WAIT_FOR_ELEVATOR",
          "GOING_INTO_ELEVATOR",
          "IN_ELEVATOR",
          "GOING_OUT_OF_ELEVATOR",
          "ON_DELIVERING",
          "ARRIVED_AT_DELIVERY_POSE",
          "WAIT_REFILL_TIMEOUT",
          "USER_OPERATE_ROBOT",
          "GOING_TO_CABINET",
          "ROBOT_OPERATE_CABINET",
          "GOING_TO_TASK_POINT",
          "ARRIVED_AT_TASK_POINT"
        ]
      },
      "DeliveryTaskResult": {
        "type": "object",
        "properties": {
          "stage": {
            "$ref": "#/components/schemas/DeliveryTaskEventStage"
          },
          "reason": {
            "type": "string",
            "default": ""
          },
          "pickup_result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DeliveryPickupResultEntry"
            }
          },
          "timestamp": {
            "type": "string",
            "format": "datetime"
          }
        }
      },
      "DeliveryTaskStatus": {
        "type": "string",
        "enum": [
          "READY",
          "RUNNING",
          "SUCCEEDED",
          "FAILED",
          "CANCELING",
          "CANCELED"
        ]
      },
      "DeliveryTask": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "task": {
            "$ref": "#/components/schemas/DeliveryTaskRequest"
          },
          "status": {
            "$ref": "#/components/schemas/DeliveryTaskStatus"
          },
          "result": {
            "$ref": "#/components/schemas/DeliveryTaskResult"
          }
        }
      },
      "DeviceError": {
        "type": "object",
        "properties": {
          "component": {
            "type": "integer"
          },
          "error_code": {
            "type": "integer"
          },
          "error_level": {
            "type": "integer"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "TaskExecutionInfo": {
        "type": "object",
        "properties": {
          "enable_task_execution": {
            "type": "boolean"
          }
        }
      },
      "GeneralEventType": {
        "type": "string",
        "description": "* `DEVICE_ERROR` 发生了Error或Fatal级别的设备健康状态报警\n* `PATH_OCCUPIED` 行进路径被阻挡\n* `ROBOT_BLOCKED` 在一个地方被长时间连续阻挡（默认3分钟）\n* `RESET_MAP_TO_DOCK` 机器人被推回桩并重置地图成功\n* `START_CHARGING` 开始充电\n* `STOP_CHARGING` 停止充电\n* `ON_DOCK` 机器人上桩\n* `OFF_DOCK` 机器人下桩\n* `UPGRADE` 正在升级固件\n* `POWER_OFF` 正在关机 \n* `PASS_THE_NARROW_CORRIDOR` 通过窄走廊 \n* `MAP_LOOP_CLOSURE` 完成一次建图闭环 \n* `SET_MAP_DONE` 完成设置地图操作\n* `MOVE_TO_LANDING_POINT_FAILED` 前往充电桩失败 \n* `SEARCH_DOCK_FAILED` 找桩失败 \n* `CHARGING_BASE_FAILED` 充电失败 \n* `SYNC_MAP_FROM_CLOUD` 从云端同步地图\n* `DOCK_ID_NOT_FOUND` 在地图中找不到绑定的桩\n* `BRAKE_RELEASED` 刹车释放按钮被按下\n* `BUMPER_TRIGGERED` 碰撞传感器触发\n* `CURRENT_POSE_OCCUPIED` 当前机器人位姿被占据\n* `CLIFF_DETECTED` 检测到悬崖\n",
        "enum": [
          "DEVICE_ERROR",
          "PATH_OCCUPIED",
          "ROBOT_BLOCKED",
          "RESET_MAP_TO_DOCK",
          "START_CHARGING",
          "STOP_CHARGING",
          "ON_DOCK",
          "OFF_DOCK",
          "UPGRADE",
          "POWER_OFF",
          "PASS_THE_NARROW_CORRIDOR",
          "MAP_LOOP_CLOSURE",
          "SET_MAP_DONE",
          "MOVE_TO_LANDING_POINT_FAILED",
          "SEARCH_DOCK_FAILED",
          "CHARGING_BASE_FAILED",
          "SYNC_MAP_FROM_CLOUD",
          "DOCK_ID_NOT_FOUND",
          "BRAKE_RELEASED",
          "BUMPER_TRIGGERED",
          "CURRENT_POSE_OCCUPIED",
          "CLIFF_DETECTED"
        ]
      },
      "ElevatorEventType": {
        "type": "string",
        "description": "* `WAIT_ELEVATOR` 机器人到达电梯等待点\n* `ENTER_ELEVATOR` 即将开始进电梯\n* `ENTER_ELEVATOR_OCCUPIED` 进电梯过程中被阻挡\n* `ENTER_ELEVATOR_FAILED` 进电梯失败\n* `TURNING_ROUND_IN_ELEVATOR` 在电梯内即将转身\n* `LEAVE_ELEVATOR` 即将开始出电梯\n* `LEAVE_ELEVATOR_OCCUPIED` 出电梯过程中被阻挡\n* `LEAVE_ELEVATOR_FAILED` 出电梯失败\n* `IN_ELEVATOR` 在电梯内\n* `OUT_OF_ELEVATOR` 在电梯外\n* `TAKE_ELEVATOR_OCCUPIED` 进出电梯被挡\n* `SEARCH_ELEVATOR_PATH_FAILED` 搜索电梯路径失败\n* `ENTER_ELEVATOR_PATH_FOUND` 进电梯搜路成功\n",
        "enum": [
          "WAIT_ELEVATOR",
          "ENTER_ELEVATOR",
          "ENTER_ELEVATOR_OCCUPIED",
          "ENTER_ELEVATOR_FAILED",
          "TURNING_ROUND_IN_ELEVATOR",
          "LEAVE_ELEVATOR",
          "LEAVE_ELEVATOR_OCCUPIED",
          "LEAVE_ELEVATOR_FAILED",
          "IN_ELEVATOR",
          "OUT_OF_ELEVATOR",
          "TAKE_ELEVATOR_OCCUPIED",
          "SEARCH_ELEVATOR_PATH_FAILED",
          "ENTER_ELEVATOR_PATH_FOUND"
        ]
      },
      "DeliveryEventType": {
        "type": "string",
        "description": "* `START_FROM_DOCK` 从桩上出发执行任务\n* `DELIVERY_SETTINGS_CHANGED` 配送相关的设置项有更新\n* `DELIVERY_TASK_START` 开始执行配送任务\n* `STATION_TASK_START` 开始执行货柜取物任务\n* `OPERATING_CABINET` 正在操作货柜\n* `BACK_TO_RECEPTION_FOR_FAILED_ORDER` 配送失败回到前台\n* `DELIVERY_NO_PICKUP` 配送任务用户未取物\n* `COLLECT_NO_PICKUP` 回前台任务用户未取物 \n* `UNDOCK_FAILED` 下桩失败(下桩重试时间为2分钟)\n* `START_TO_WORK` 机器人开始工作(进入工作时间或电量充到80%)\n* `GET_OFF_WORK` 机器人下班啦\n* `LOW_BATTERY` 电量过低，机器人即将回桩\n* `NEW_TASK_RECEIVED` 从云端接收到新的任务\n* `ROBOT_REBOOT` 机器人即将重启\n* `DISINFECT_TASK_FAILED` 消毒任务失败\n* `LOCALIZATION_ANOMALY` 定位异常, 需要推回桩或调用接口重置机器人位姿后才会消除\n",
        "enum": [
          "START_FROM_DOCK",
          "DELIVERY_SETTINGS_CHANGED",
          "DELIVERY_TASK_START",
          "STATION_TASK_START",
          "OPERATING_CABINET",
          "BACK_TO_RECEPTION_FOR_FAILED_ORDER",
          "DELIVERY_NO_PICKUP",
          "COLLECT_NO_PICKUP",
          "UNDOCK_FAILED",
          "START_TO_WORK",
          "GET_OFF_WORK",
          "LOW_BATTERY",
          "NEW_TASK_RECEIVED",
          "ROBOT_REBOOT",
          "DISINFECT_TASK_FAILED",
          "LOCALIZATION_ANOMALY"
        ]
      },
      "RobotEvent": {
        "type": "object",
        "description": "机器人事件信息，type在不同场景下会扩展新的定义，APP只需处理自己关心的事件即可。      GeneralEventType为通用的事件，ElevatorEventType为进出电梯相关的事件, DeliveryEventType为配送相关事件。",
        "properties": {
          "type": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/GeneralEventType"
              },
              {
                "$ref": "#/components/schemas/ElevatorEventType"
              },
              {
                "$ref": "#/components/schemas/DeliveryEventType"
              }
            ]
          },
          "timestamp": {
            "type": "string",
            "description": "系统启动以来的毫秒数",
            "format": "int64"
          }
        }
      },
      "PostTaskRequestEntry": {
        "type": "object",
        "properties": {
          "location": {
            "type": "object",
            "properties": {
              "poi_name": {
                "type": "string",
                "description": "任务目的地",
                "example": 101
              },
              "task_points": {
                "description": "任务点，表示执行任务过程中需要停靠的点, 不需要的话为空即可。",
                "type": "array",
                "items": {
                  "type": "string",
                  "example": "A01"
                }
              }
            }
          },
          "type": {
            "type": "string",
            "description": "* `TAKEOUT` 外卖配送任务（仅限有货仓的机型） \n* `GUIDE` 引领任务，将人带到指定目的地\n* `FOOD_DELIVERY` 送餐任务\n* `RETURN` 快速返航，回到取餐点\n* `RECYCLE` 回收餐盘\n* `TAKEOUT_DISTRIBUTE` 外卖分发，打开所有舱门由用户自主取物\n",
            "enum": [
              "TAKEOUT",
              "GUIDE",
              "FOOD_DELIVERY",
              "RETURN",
              "RECYCLE",
              "TAKEOUT_DISTRIBUTE"
            ]
          },
          "cargos": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CargoEntry"
            }
          }
        }
      },
      "DeliveryWorkMode": {
        "type": "object",
        "properties": {
          "work_mode": {
            "type": "string",
            "description": "* `DISPATCH` 派送模式，本地应当禁止用户创建任务，只响应云端的呼叫任务\n* `RECYCLE` 回盘模式，本地除了回盘禁止创建其他任务，可响应云端的呼叫回盘任务\n* `MANUAL` 手动操作模式，本地人工创单进行配送或回盘\n",
            "enum": [
              "DISPATCH",
              "RECYCLE",
              "MANUAL"
            ]
          }
        }
      },
      "DeliverySettings": {
        "type": "object",
        "properties": {
          "low_battery_level": {
            "type": "object",
            "properties": {
              "level1": {
                "type": "integer",
                "default": 6,
                "description": "达到该电量时机器人自动关机"
              },
              "level2": {
                "type": "integer",
                "default": 10,
                "description": "达到该电量时机器人取消所有任务并回桩"
              },
              "level3": {
                "type": "integer",
                "default": 20,
                "description": "预留，通过云端调度机器时，一旦达到该电量应当禁止下发新的任务"
              },
              "level4": {
                "type": "integer",
                "default": 30,
                "description": "达到该电量时，机器人无法创建外卖配送单"
              }
            }
          },
          "timeout_settings": {
            "type": "object",
            "properties": {
              "takeout_pickup_timeout": {
                "type": "integer",
                "default": 300,
                "description": "配送到达目的地后，等待用户开仓的时间，单位秒"
              },
              "takeout_open_door_timeout": {
                "type": "integer",
                "default": 90,
                "description": "用户开仓后，自动关仓的等待时间，单位秒"
              },
              "collect_pickup_timeout": {
                "type": "integer",
                "default": 300,
                "description": "配送失败返回前台时，等待用户取物的时间，单位秒"
              },
              "brake_released_timeout": {
                "type": "integer",
                "default": 300,
                "description": "按下刹车释放和急停时，任务等待时间，只要在该时间内恢复任务就能继续执行"
              },
              "food_pickup_timeout": {
                "type": "integer",
                "default": 120,
                "description": "送餐到达目的地后，等待用户取餐的时间，单位秒"
              }
            }
          }
        }
      },
      "WorkingTime": {
        "type": "object",
        "properties": {
          "hours": {
            "type": "array",
            "items": {
              "type": "object",
              "description": "可以包含多段工作时间，起始时间和结束时间的格式均为HH::MM::SS",
              "properties": {
                "start_time": {
                  "type": "string",
                  "example": "08:00:00"
                },
                "end_time": {
                  "type": "string",
                  "example": "18:00:00"
                }
              }
            }
          },
          "restdays": {
            "type": "array",
            "description": "休息日，0表示周日，1~6分别表示周一到周六",
            "default": [],
            "items": {
              "type": "number",
              "enum": [
                0,
                1,
                2,
                3,
                4,
                5,
                6
              ]
            }
          }
        }
      },
      "LocationInfo": {
        "type": "object",
        "properties": {
          "poi_name": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/PoiType"
          }
        }
      },
      "GoingHomeStage": {
        "type": "object",
        "description": "正在回桩，对应stage为GOING_HOME",
        "properties": {
          "stage": {
            "type": "string",
            "enum": [
              "GOING_HOME"
            ]
          },
          "milestone": {
            "type": "string",
            "enum": [
              "INITIALIZING",
              "GOING_TO_ELEVATOR",
              "WAIT_FOR_ELEVATOR",
              "GOING_INTO_ELEVATOR",
              "IN_ELEVATOR",
              "GOING_OUT_OF_ELEVATOR",
              "GOING_TO_LANDING_POINT",
              "GOING_HOME"
            ]
          },
          "current_floor": {
            "type": "string",
            "example": "2F"
          },
          "target_floor": {
            "type": "string",
            "example": "1F"
          }
        }
      },
      "IdleStage": {
        "type": "object",
        "description": "空闲，对应stage为IDLE",
        "properties": {
          "stage": {
            "type": "string",
            "enum": [
              "IDLE"
            ]
          },
          "current_floor": {
            "type": "string",
            "example": "1F"
          }
        }
      },
      "OnDeliveringStage": {
        "type": "object",
        "description": "正在前往目标点，对应stage为ON_DELIVERING",
        "properties": {
          "stage": {
            "type": "string",
            "enum": [
              "ON_DELIVERING"
            ]
          },
          "milestone": {
            "$ref": "#/components/schemas/DeliveryTaskEventStage"
          },
          "current_floor": {
            "type": "string"
          },
          "target_floor": {
            "type": "string"
          },
          "info": {
            "type": "object",
            "properties": {
              "task": {
                "$ref": "#/components/schemas/DeliveryTaskRequest"
              },
              "location": {
                "$ref": "#/components/schemas/LocationInfo"
              }
            }
          }
        }
      },
      "ArrivedAtTargetStage": {
        "type": "object",
        "description": "已到达目标点，对应stage为ARRIVED_AT_TARGET",
        "properties": {
          "stage": {
            "type": "string",
            "enum": [
              "ARRIVED_AT_TARGET"
            ]
          },
          "info": {
            "$ref": "#/components/schemas/DeliveryTask"
          },
          "pickup": {
            "type": "object",
            "properties": {
              "num_total": {
                "type": "integer"
              },
              "num_picked_up": {
                "type": "integer"
              },
              "result": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DeliveryPickupResultEntry"
                }
              }
            }
          }
        }
      },
      "DeviceErrorStage": {
        "type": "object",
        "description": "设备故障，对应stage为DEVICE_ERROR",
        "properties": {
          "stage": {
            "type": "string",
            "enum": [
              "DEVICE_ERROR"
            ]
          },
          "info": {
            "type": "object",
            "properties": {
              "errors": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DeviceError"
                }
              }
            }
          }
        }
      },
      "OnReturningStage": {
        "type": "object",
        "description": "机器人正在返航",
        "properties": {
          "stage": {
            "type": "string",
            "enum": [
              "ON_RETURNING"
            ]
          },
          "current_floor": {
            "type": "string"
          },
          "target_floor": {
            "type": "string"
          }
        }
      },
      "ArrivedAtTaskPointStage": {
        "type": "object",
        "description": "到达任务点，对应stage为ARRIVED_AT_TASK_POINT",
        "properties": {
          "stage": {
            "type": "string",
            "enum": [
              "ARRIVED_AT_TASK_POINT"
            ]
          },
          "info": {
            "type": "object",
            "properties": {
              "task": {
                "$ref": "#/components/schemas/DeliveryTaskRequest"
              },
              "location": {
                "$ref": "#/components/schemas/LocationInfo"
              }
            }
          }
        }
      },
      "GoingToTaskPointStage": {
        "type": "object",
        "description": "正在前往任务点，对应stage为GOING_TO_TASK_POINT",
        "properties": {
          "stage": {
            "type": "string",
            "enum": [
              "GOING_TO_TASK_POINT"
            ]
          },
          "current_floor": {
            "type": "string"
          },
          "target_floor": {
            "type": "string"
          },
          "info": {
            "type": "object",
            "properties": {
              "task": {
                "$ref": "#/components/schemas/DeliveryTaskRequest"
              }
            }
          }
        }
      },
      "TaskStage": {
        "type": "object",
        "description": "返回数据为以下几种结构体中的其中一种，首先判断stage字段，再解析剩余的信息",
        "oneOf": [
          {
            "$ref": "#/components/schemas/DeviceErrorStage"
          },
          {
            "$ref": "#/components/schemas/GoingToTaskPointStage"
          },
          {
            "$ref": "#/components/schemas/ArrivedAtTaskPointStage"
          },
          {
            "$ref": "#/components/schemas/OnDeliveringStage"
          },
          {
            "$ref": "#/components/schemas/ArrivedAtTargetStage"
          },
          {
            "$ref": "#/components/schemas/OnReturningStage"
          },
          {
            "$ref": "#/components/schemas/GoingHomeStage"
          },
          {
            "$ref": "#/components/schemas/IdleStage"
          }
        ]
      },
      "ElevatorInfo": {
        "type": "object",
        "description": "电梯区域信息",
        "required": [
          "door_type",
          "elevator_id"
        ],
        "properties": {
          "door_type": {
            "type": "string",
            "enum": [
              "front_door",
              "rear_door",
              "double_doors"
            ]
          },
          "elevator_id": {
            "type": "string"
          },
          "front_scheduling_poses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Pose3D"
            }
          },
          "rear_scheduling_poses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Pose3D"
            }
          }
        }
      },
      "MoveOptions": {
        "type": "object",
        "required": [
          "mode"
        ],
        "properties": {
          "mode": {
            "type": "integer",
            "default": 0,
            "description": "0：自由导航， 1：严格轨道模式(遇障碍物停止并等待)，2： 轨道优先模式(遇障碍物下轨绕行)",
            "enum": [
              0,
              1,
              2
            ]
          },
          "flags": {
            "type": "array",
            "description": "* `precise` 精确到点模式，使机器人到点时更加精准\n* `with_yaw` 精确到角模式，只有包含该flag，yaw字段的值才会生效\n* `fail_retry_count` 指定搜路失败后的重试次数，不指定时采用默认配置\n* `find_path_ignoring_dynamic_obstacles` 搜路时忽略动态障碍物，适用于人群拥挤、通道狭窄的区域\n* `with_directed_virtual_track` 有向轨道搜路，当mode为1或2时，使机器人只能按照轨道方向移动",
            "default": [],
            "items": {
              "type": "string",
              "enum": [
                "precise",
                "with_yaw",
                "fail_retry_count",
                "find_path_ignoring_dynamic_obstacles",
                "with_directed_virtual_track"
              ]
            }
          },
          "yaw": {
            "type": "number",
            "description": "到目标点后机器人的朝向"
          },
          "acceptable_precision": {
            "type": "number",
            "description": "可接受的到点范围，当目标点被占据时，机器人离目标点距离在该范围内都算成功， 默认值为0.1米或0.18米，该值不影响机器人到点精度。"
          },
          "fail_retry_count": {
            "type": "integer",
            "description": "失败重试次数"
          },
          "speed_ratio": {
            "type": "number",
            "description": "【所需固件版本 4.5.4】速度比例, 配置的最大移动速度乘以该值为本次运动的最大速度, 最小值为0.1, 大于1的值会导致避障距离变长，在动态障碍物较多的环境中请谨慎使用。"
          }
        }
      },
      "EnterElevatorOptions": {
        "type": "object",
        "properties": {
          "elevator_door_flag": {
            "type": "string",
            "description": "* `front_door` 从电梯前门进入\n* `rear_door` 从电梯后门进入\n",
            "default": "front_door",
            "items": {
              "type": "string",
              "enum": [
                "front_door",
                "rear_door"
              ]
            }
          },
          "elevator_stopping_yaw": {
            "type": "string",
            "description": "* `face_to_front_door` 进入电梯后面向电梯前门\n* `face_to_rear_door` 进入电梯后面向电梯后门\n",
            "default": "face_to_front_door",
            "items": {
              "type": "string",
              "enum": [
                "face_to_front_door",
                "face_to_rear_door"
              ]
            }
          },
          "timeout_in_ms": {
            "type": "number",
            "description": "进电梯的总时长"
          },
          "use_conservative_mode": {
            "type": "boolean",
            "description": "true表示保守策略，前往电梯中心点。false表示挤电梯，前往电梯更里面"
          }
        }
      },
      "LeaveElevatorOptions": {
        "type": "object",
        "properties": {
          "elevator_door_flag": {
            "type": "string",
            "description": "* `front_door` 从电梯前门进入\n* `rear_door` 从电梯后门进入\n",
            "default": "front_door",
            "items": {
              "type": "string",
              "enum": [
                "front_door",
                "rear_door"
              ]
            }
          },
          "timeout_in_ms": {
            "type": "number",
            "description": "出电梯的总时长"
          },
          "arrive_door_timeout_in_ms": {
            "type": "number",
            "description": "出电梯过程中到达电梯门的超时时间"
          },
          "search_path_timeout_in_ms": {
            "type": "number",
            "description": "出电梯的搜路超时时间，超过这个时间仍未搜到路便放弃出电梯"
          },
          "on_elevator_door_timeout_in_ms": {
            "type": "number",
            "description": "堵在电梯门槛上的超时时间，到达超时放弃出梯"
          },
          "if_need_reach_milestone": {
            "type": "boolean",
            "description": "true前往出后前往目标点，false表示只到达门口等待点"
          },
          "move_options": {
            "$ref": "#/components/schemas/MoveOptions"
          }
        }
      },
      "MoveToActionOptions": {
        "type": "object",
        "required": [
          "target"
        ],
        "properties": {
          "target": {
            "$ref": "#/components/schemas/Location"
          },
          "move_options": {
            "$ref": "#/components/schemas/MoveOptions"
          }
        }
      },
      "SeriesMoveToActionOptions": {
        "type": "object",
        "required": [
          "targets"
        ],
        "properties": {
          "targets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Location"
            }
          },
          "move_options": {
            "$ref": "#/components/schemas/MoveOptions"
          }
        }
      },
      "ActionDirection": {
        "type": "integer",
        "description": "* `0` 前进\n* `1` 后退\n* `2` 右转\n* `3` 左转\n",
        "enum": [
          0,
          1,
          2,
          3
        ]
      },
      "MoveByActionOptions": {
        "type": "object",
        "description": "遥控运动的参数，direction和theta只需包含一个即可，前者指定方向，后者指定一个角速度进行转弯",
        "properties": {
          "direction": {
            "$ref": "#/components/schemas/ActionDirection"
          },
          "theta": {
            "type": "number"
          },
          "duration": {
            "type": "integer",
            "description": "运动持续时间，单位毫秒。不指定时默认持续500毫秒。注意！遥控运动不会避障，请勿设置过长的持续时间。"
          }
        }
      },
      "GoHomeActionOptions": {
        "type": "object",
        "properties": {
          "gohome_options": {
            "type": "object",
            "properties": {
              "flags": {
                "type": "string",
                "default": "dock",
                "description": "dock表示需要上桩，no_dock表示回到上桩点即可",
                "enum": [
                  "dock",
                  "no_dock"
                ]
              },
              "back_to_landing": {
                "type": "boolean",
                "description": "上桩失败后回到上桩点"
              },
              "charging_retry_count": {
                "type": "integer",
                "description": "上桩重试次数"
              },
              "move_options": {
                "type": "object",
                "description": "用于设置回桩路上的运动模式。<h4>所需最低固件版本 4.6.1</h4>",
                "properties": {
                  "mode": {
                    "type": "integer",
                    "description": "请参考MoveOptions中的mode字段，0为自由导航，2为轨道优先模式"
                  }
                }
              }
            }
          }
        }
      },
      "RotateActionOptions": {
        "type": "object",
        "required": [
          "angle"
        ],
        "properties": {
          "angle": {
            "type": "number",
            "description": "机器人转动的角度值，单位弧度，正数表示逆时针旋转，负数表示顺时针旋转"
          }
        }
      },
      "RotateToActionOptions": {
        "type": "object",
        "required": [
          "angle"
        ],
        "properties": {
          "angle": {
            "type": "number",
            "description": "机器人停止时的Yaw值，单位弧度"
          }
        }
      },
      "RecoverLocalizationActionOptions": {
        "type": "object",
        "description": "不包含area字段或area为空时为全局重定位，否则为局部重定位",
        "properties": {
          "area": {
            "$ref": "#/components/schemas/Rectangle"
          },
          "relocalization_options": {
            "type": "object",
            "properties": {
              "max_recover_time": {
                "type": "integer",
                "description": "重定位超时时间，单位毫秒"
              },
              "recover_movement_type": {
                "type": "string",
                "description": "* `RotateOnly` 旋转重定位 \n* `NoMove` 静止重定位 \n",
                "enum": [
                  "RotateOnly",
                  "NoMove"
                ]
              }
            }
          }
        }
      },
      "MoveToTagActionOptions": {
        "type": "object",
        "description": "标签精准对接，其中target为开始对接的起始位置",
        "required": [
          "target",
          "tag_type"
        ],
        "properties": {
          "target": {
            "$ref": "#/components/schemas/Pose3D"
          },
          "tag_type": {
            "type": "integer",
            "default": 0,
            "description": "0：二维码视觉标签， 1：激光标签, 2：激光反光板, 3：货架(需要6.0或更高版本)",
            "enum": [
              0,
              1,
              2,
              3
            ]
          },
          "target_relative_pose": {
            "description": "机器人停止时相对标签的位置, 以标签坐标系表示，tag_type为3时忽略该字段，用dock_allowance表示机器人位置。",
            "type": "object",
            "properties": {
              "x": {
                "type": "number",
                "description": "离标签的纵向距离"
              },
              "y": {
                "type": "number",
                "description": "离标签中心的横向偏差"
              }
            }
          },
          "backward_docking": {
            "type": "boolean",
            "default": false,
            "description": "是否向后对接"
          },
          "turn_radian": {
            "type": "number",
            "description": "对接成功后的转向弧度，默认机器是面向或背对Tag，如果需要机器在对接成功后转指定角度，请设置该字段。"
          },
          "tag_ids": {
            "description": "tag_type为0时有效，二维码ID",
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "reflect_tag_num": {
            "description": "tag_type为2时有效，对接的反光板个数，默认为1.",
            "type": "integer"
          },
          "dock_retry_count": {
            "description": "对接失败后的重试次数，默认不重试.",
            "type": "integer"
          },
          "dock_allowance": {
            "description": "tag_type为3时有效，对接货架时默认机器中心对准货架中心。dock_allowance表示机器人留在货架外的机身长度。",
            "type": "number"
          }
        }
      },
      "BackOffFromTagActionOptions": {
        "type": "object",
        "description": "从二维码前后退",
        "required": [
          "target"
        ],
        "properties": {
          "backup_mode": {
            "type": "integer",
            "description": "* `0` 自由后退\n* `1` 窄道后退，在后退过程中一直观测二维码并调整角度\n",
            "enum": [
              0,
              1
            ]
          },
          "tag_type": {
            "type": "integer",
            "default": 0,
            "description": "0：二维码视觉标签， 1：激光标签, 2： 激光反光板",
            "enum": [
              0,
              1,
              2
            ]
          },
          "backup_distance": {
            "description": "后退的距离, 可选值，默认后退直到机器可以转身",
            "type": "number",
            "format": "double"
          },
          "backward_docking": {
            "type": "boolean",
            "default": false,
            "description": "是否向后对接, 如果是向后对接，则调用BackOffFromTagAction时实际是向前移动"
          }
        }
      },
      "MultiFloorMoveActionOptions": {
        "type": "object",
        "required": [
          "target"
        ],
        "properties": {
          "target": {
            "type": "object",
            "oneOf": [
              {
                "properties": {
                  "poi_name": {
                    "type": "string"
                  }
                }
              },
              {
                "$ref": "#/components/schemas/MultiFloorTarget"
              }
            ]
          },
          "move_options": {
            "$ref": "#/components/schemas/MoveOptions"
          }
        }
      },
      "SweepActionOptions": {
        "type": "object",
        "description": "清扫Action的参数，不包含region_ids时清扫所有区域，否则只清扫指定区域",
        "properties": {
          "sweep_options": {
            "type": "object",
            "properties": {
              "region_ids": {
                "type": "array",
                "items": {
                  "type": "integer"
                }
              },
              "spacing": {
                "type": "number",
                "description": "工字形覆盖规划的间隔，无特殊要求时不需要指定"
              }
            }
          }
        }
      },
      "ReturnToParkingActionOptions": {
        "type": "object",
        "description": "返航Action的参数",
        "properties": {
          "target": {
            "type": "object",
            "description": "可选参数，该参数为空时表示由机器人自主选择返航停靠点，当前停靠点被占时会自动选择新的停靠点。如果指定了target参数，则只能返回该星标点。",
            "properties": {
              "poi_name": {
                "type": "string"
              }
            }
          },
          "move_options": {
            "$ref": "#/components/schemas/MoveOptions"
          }
        }
      },
      "FollowPathPointsActionOptions": {
        "type": "object",
        "required": [
          "path_points"
        ],
        "properties": {
          "path_points": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Point"
            }
          },
          "move_options": {
            "$ref": "#/components/schemas/MoveOptions"
          }
        }
      },
      "EnterElevatorActionOptions": {
        "type": "object",
        "required": [
          "elevator_id"
        ],
        "properties": {
          "elevator_id": {
            "type": "string"
          },
          "enter_elevator_options": {
            "$ref": "#/components/schemas/EnterElevatorOptions"
          }
        }
      },
      "LeaveElevatorActionOptions": {
        "type": "object",
        "required": [
          "elevator_id"
        ],
        "properties": {
          "elevator_id": {
            "type": "string"
          },
          "target": {
            "$ref": "#/components/schemas/Pose2D"
          },
          "leave_elevator_options": {
            "$ref": "#/components/schemas/LeaveElevatorOptions"
          }
        }
      },
      "DisabledSensorMaskData": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "isAlways": {
            "type": "boolean"
          }
        }
      },
      "SensorMaskCtrlData": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "isAlways": {
            "type": "boolean"
          },
          "isEnabled": {
            "type": "boolean"
          }
        }
      },
      "LightControlData": {
        "type": "object",
        "properties": {
          "channel": {
            "type": "string",
            "enum": [
              "One",
              "Two"
            ],
            "example": "One",
            "description": "led控制通道:One通道一，Two通道二"
          },
          "controlPart": {
            "type": "string",
            "enum": [
              "Left",
              "Right"
            ],
            "example": "Left",
            "description": "led控制部分:Left左半部，Right右半部"
          },
          "mode": {
            "type": "string",
            "enum": [
              "AlwaysBright",
              "Breathe",
              "Blink",
              "HorseLamp"
            ],
            "example": "AlwaysBright",
            "description": "led控制模式:AlwaysBright常亮，Breathe呼吸，Blink闪烁，HorseLamp跑马"
          },
          "color": {
            "type": "object",
            "properties": {
              "red": {
                "type": "integer"
              },
              "green": {
                "type": "integer"
              },
              "blue": {
                "type": "integer"
              }
            },
            "description": "常亮、闪烁和跑马模式下表示设置led的颜色，呼吸模式表示开始呼吸时led的颜色（一般为黑）"
          },
          "brightnessEndColor": {
            "type": "object",
            "properties": {
              "red": {
                "type": "integer"
              },
              "green": {
                "type": "integer"
              },
              "blue": {
                "type": "integer"
              }
            },
            "description": "呼吸模式表示呼吸结束时led的颜色（设置呼吸想要达到的颜色），设置的值需要比color值大；其余模式可填入任意值"
          },
          "brightMs": {
            "type": "integer",
            "description": "常亮模式可填入任意值；呼吸模式填入亮度单次变化时间（单次变化表示color每次增大1的时间）；闪烁模式填入点亮的持续时间；跑马模式表示点亮下一个灯的时间"
          },
          "offMs": {
            "type": "integer",
            "description": "闪烁模式填入熄灭的持续时间；其他模式可填入任意值"
          }
        }
      },
      "TaskOperation": {
        "type": "object",
        "properties": {
          "display_name": {
            "type": "string",
            "description": "目标点位POI的display_name"
          },
          "action": {
            "type": "string",
            "description": "机器人在目标点位需要执行的操作"
          },
          "wait_time": {
            "type": "integer",
            "description": "机器人在目标点位完成操作后的等待时间，单位秒"
          }
        }
      },
      "TaskTemplateRequest": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "format": "uuid",
            "description": "任务模板ID"
          },
          "name": {
            "type": "string",
            "description": "任务模板名称"
          },
          "action_list": {
            "type": "array",
            "description": "任务点位列表",
            "items": {
              "$ref": "#/components/schemas/TaskOperation"
            }
          }
        }
      },
      "TaskTemplate": {
        "type": "object",
        "properties": {
          "task_template_key": {
            "type": "string",
            "format": "uuid",
            "description": "任务模板ID"
          },
          "task_template_type": {
            "type": "integer",
            "description": "任务模板类型"
          },
          "name": {
            "type": "string",
            "description": "任务模板名称"
          },
          "scene_id": {
            "type": "string",
            "format": "uuid",
            "description": "任务模板绑定的场景ID"
          },
          "device_id": {
            "type": "string",
            "format": "uuid",
            "description": "创建任务模板的设备ID"
          },
          "action_list": {
            "type": "array",
            "description": "任务点位列表",
            "items": {
              "$ref": "#/components/schemas/TaskOperation"
            }
          }
        }
      },
      "IndustryTarget": {
        "type": "object",
        "properties": {
          "target_name": {
            "type": "string"
          },
          "action": {
            "type": "string"
          },
          "wait_time": {
            "type": "integer"
          }
        }
      },
      "IndustryTaskRequest": {
        "type": "object",
        "properties": {
          "target": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "CARRY_CALLING",
              "CARRY_CALLING_BY_TEMPLATE",
              "INDUSTRY"
            ]
          },
          "order_id": {
            "type": "string"
          },
          "template_key": {
            "type": "string"
          },
          "start_time": {
            "type": "string"
          },
          "task_targets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IndustryTarget"
            }
          },
          "message": {
            "type": "object"
          }
        }
      },
      "IndustryTaskEventStage": {
        "type": "string",
        "description": "任务执行阶段",
        "enum": [
          "GOING_TO_ELEVATOR",
          "WAIT_FOR_ELEVATOR",
          "GOING_INTO_ELEVATOR",
          "IN_ELEVATOR",
          "GOING_OUT_OF_ELEVATOR",
          "GOING_TO_TASK_POINT",
          "ARRIVED_AT_TASK_POINT",
          "GOING_TO_TARGET_POINT",
          "ARRIVED_AT_TARGET_POINT",
          "WAIT_OPERATION"
        ]
      },
      "IndustryTaskResult": {
        "type": "object",
        "properties": {
          "stage": {
            "$ref": "#/components/schemas/IndustryTaskEventStage"
          },
          "reason": {
            "type": "string",
            "default": ""
          },
          "timestamp": {
            "type": "string",
            "format": "datetime"
          }
        }
      },
      "IndustryTask": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "task": {
            "$ref": "#/components/schemas/IndustryTaskRequest"
          },
          "status": {
            "$ref": "#/components/schemas/DeliveryTaskStatus"
          },
          "result": {
            "$ref": "#/components/schemas/IndustryTaskResult"
          }
        }
      }
    },
    "responses": {
      "ActionInfoResponse": {
        "description": "OK",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ActionInfo"
            }
          }
        }
      },
      "BooleanResponse": {
        "description": "OK",
        "content": {
          "application/json": {
            "schema": {
              "type": "boolean"
            }
          }
        }
      },
      "IntegerResponse": {
        "description": "OK",
        "content": {
          "application/json": {
            "schema": {
              "type": "integer"
            }
          }
        }
      },
      "DoubleResponse": {
        "description": "OK",
        "content": {
          "application/json": {
            "schema": {
              "type": "number",
              "format": "double"
            }
          }
        }
      },
      "StringResponse": {
        "description": "OK",
        "content": {
          "text/plain": {
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "CommonResponse": {
        "description": "OK",
        "content": {
          "text/plain": {
            "schema": {
              "type": "object",
              "description": "result为true表示操作成功，result为false时，msg表示失败的原因",
              "properties": {
                "result": {
                  "type": "boolean"
                },
                "msg": {
                  "type": "string"
                },
                "data": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "OperationResultResponse": {
        "description": "OK",
        "content": {
          "text/plain": {
            "schema": {
              "type": "object",
              "description": "result为true表示操作成功，result为false时，reason表示失败的原因",
              "properties": {
                "result": {
                  "type": "boolean"
                },
                "reason": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "PathPointsResponse": {
        "description": "OK",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "path_points": {
                  "$ref": "#/components/schemas/PathPoints"
                }
              }
            }
          }
        }
      },
      "JackStatusResponse": {
        "description": "OK",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "actual_pos": {
                  "type": "integer"
                },
                "alarm": {
                  "type": "integer"
                },
                "drv_status": {
                  "type": "integer"
                },
                "stage": {
                  "type": "integer"
                }
              }
            }
          }
        }
      },
      "IMURawADCDataResponse": {
        "description": "OK",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "acc_x": {
                  "type": "integer"
                },
                "acc_y": {
                  "type": "integer"
                },
                "acc_z": {
                  "type": "integer"
                },
                "gyro_x": {
                  "type": "integer"
                },
                "gyro_y": {
                  "type": "integer"
                },
                "gyro_z": {
                  "type": "integer"
                },
                "comp_x": {
                  "type": "integer"
                },
                "comp_y": {
                  "type": "integer"
                },
                "comp_z": {
                  "type": "integer"
                },
                "timestamp": {
                  "type": "integer"
                }
              }
            }
          }
        }
      },
      "IMURawDataResponse": {
        "description": "OK",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "acc_x": {
                  "type": "number"
                },
                "acc_y": {
                  "type": "number"
                },
                "acc_z": {
                  "type": "number"
                },
                "gyro_x": {
                  "type": "number"
                },
                "gyro_y": {
                  "type": "number"
                },
                "gyro_z": {
                  "type": "number"
                },
                "comp_x": {
                  "type": "number"
                },
                "comp_y": {
                  "type": "number"
                },
                "comp_z": {
                  "type": "number"
                },
                "timestamp": {
                  "type": "integer"
                }
              }
            }
          }
        }
      }
    }
  }
}